
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 2.2.0.101

// ldbanno -n Verilog -o Parallel2MIPI_Parallel2MIPI_mapvo.vo -w -neg Parallel2MIPI_Parallel2MIPI_map.ncd 
// Netlist created on Thu Jul 25 11:42:23 2013
// Netlist written on Thu Jul 25 11:42:26 2013
// Design is for device LCMXO2-1200HC
// Design is for package TQFP100
// Design is for performance grade 6

`timescale 1 ns / 1 ps

module packetheader ( reset_n, short_en, long_en, byte_clk, byte_data, vc, dt, 
                      wc, chksum_rdy, chksum, bytepkt_en, bytepkt, EoTp );
  input  reset_n, short_en, long_en, byte_clk;
  input  [31:0] byte_data;
  input  [1:0] vc;
  input  [5:0] dt;
  input  [15:0] wc;
  input  chksum_rdy;
  input  [15:0] chksum;
  input  EoTp;
  output bytepkt_en;
  output [31:0] bytepkt;
  wire   \lpkt_cnt[0] , lpkt_cnt, \lpkt_cnt_s[0] , byte_clk_c, 
         \lpkt_cnt_cry[0] , \u_PH_DLY_FIFO/rcount_3 , \u_PH_DLY_FIFO/rcount_2 , 
         \u_PH_DLY_FIFO/ircount_3 , \u_PH_DLY_FIFO/ircount_2 , 
         \u_PH_DLY_FIFO/rden_i , un1_q_bytepkt_en_0, \u_PH_DLY_FIFO/co0_1 , 
         \u_PH_DLY_FIFO/full_d , \u_PH_DLY_FIFO/full_d_c , 
         \u_PH_DLY_FIFO/FF_0_Q , \u_PH_DLY_FIFO/wcount_r1 , 
         \u_PH_DLY_FIFO/rcount_1 , \u_PH_DLY_FIFO/w_g2b_xor_cluster_0 , 
         \u_PH_DLY_FIFO/rcount_0 , \u_PH_DLY_FIFO/w_gcount_2 , 
         \u_PH_DLY_FIFO/w_gcount_3 , \u_PH_DLY_FIFO/cmp_ci , 
         \u_PH_DLY_FIFO/w_gcount_r3 , \u_PH_DLY_FIFO/w_gcount_r2 , 
         \u_PH_DLY_FIFO/co0_2 , \u_PH_DLY_FIFO/w_gctr_ci , 
         \u_PH_DLY_FIFO/wcount_1 , \u_PH_DLY_FIFO/wcount_0 , 
         \u_PH_DLY_FIFO/iwcount_1 , \u_PH_DLY_FIFO/iwcount_0 , 
         \u_PH_DLY_FIFO/wren_i , \u_PH_DLY_FIFO/co0 , \u_PH_DLY_FIFO/wcount_3 , 
         \u_PH_DLY_FIFO/wcount_2 , \u_PH_DLY_FIFO/iwcount_3 , 
         \u_PH_DLY_FIFO/iwcount_2 , q_long_en_1, q_long_en, q_long_en_2, 
         \u_PH_DLY_FIFO/r_gctr_ci , \u_PH_DLY_FIFO/ircount_1 , 
         \u_PH_DLY_FIFO/ircount_0 , \u_PH_DLY_FIFO/r_gcount_w2 , 
         \u_PH_DLY_FIFO/r_gcount_w3 , \u_PH_DLY_FIFO/r_gcount_w23 , 
         \u_PH_DLY_FIFO/r_gcount_w22 , \u_PH_DLY_FIFO/empty_d , 
         \u_PH_DLY_FIFO/empty_d_c , \u_PH_DLY_FIFO/FF_1_Q , 
         \u_PH_DLY_FIFO/w_gcount_r0 , \u_PH_DLY_FIFO/w_gcount_r1 , 
         \u_PH_DLY_FIFO/w_gcount_r21 , \u_PH_DLY_FIFO/w_gcount_r20 , 
         \u_PH_DLY_FIFO/cmp_ci_1 , \u_PH_DLY_FIFO/full_cmp_clr , 
         \u_PH_DLY_FIFO/full_cmp_set , \u_PH_DLY_FIFO/rcount_w2 , 
         \u_PH_DLY_FIFO/co0_3 , \u_PH_DLY_FIFO/w_gcount_r23 , 
         \u_PH_DLY_FIFO/w_gcount_r22 , \u_PH_DLY_FIFO/rcount_w1 , 
         \u_PH_DLY_FIFO/r_g2b_xor_cluster_0 , \u_PH_DLY_FIFO/r_gcount_w0 , 
         \u_PH_DLY_FIFO/r_gcount_w1 , \u_PH_DLY_FIFO/r_gcount_w21 , 
         \u_PH_DLY_FIFO/r_gcount_w20 , \u_PH_DLY_FIFO/empty_cmp_clr , 
         \u_PH_DLY_FIFO/empty_cmp_set , \u_PH_DLY_FIFO/wcount_r2 , 
         \u_PH_DLY_FIFO/w_gcount_0 , \u_PH_DLY_FIFO/w_gcount_1 , 
         \lpkt_cnt[15] , \q_wc[15] , un6_wc_end_flag_a_4_cry_14, 
         un6_wc_end_flag_15, \un6_wc_end_flag_a_4_i[16] , \lpkt_cnt[14] , 
         \q_wc[14] , \lpkt_cnt[13] , \q_wc[13] , un6_wc_end_flag_a_4_cry_12, 
         un6_wc_end_flag_13, un6_wc_end_flag_14, \lpkt_cnt[12] , \q_wc[12] , 
         \lpkt_cnt[11] , \q_wc[11] , un6_wc_end_flag_a_4_cry_10, 
         un6_wc_end_flag_11, un6_wc_end_flag_12, \lpkt_cnt[10] , \q_wc[10] , 
         \lpkt_cnt[9] , \q_wc[9] , un6_wc_end_flag_a_4_cry_8, 
         un6_wc_end_flag_9, un6_wc_end_flag_10, \lpkt_cnt[8] , \q_wc[8] , 
         \lpkt_cnt[7] , \q_wc[7] , un6_wc_end_flag_a_4_cry_6, 
         un6_wc_end_flag_7, un6_wc_end_flag_8, \lpkt_cnt[6] , \q_wc[6] , 
         \lpkt_cnt[5] , \q_wc[5] , un6_wc_end_flag_a_4_cry_4, 
         un6_wc_end_flag_5, un6_wc_end_flag_6, \lpkt_cnt[4] , \q_wc[4] , 
         \lpkt_cnt[3] , \q_wc[3] , un6_wc_end_flag_a_4_cry_2, 
         un6_wc_end_flag_3, un6_wc_end_flag_4, \lpkt_cnt[2] , \q_wc[2] , 
         \lpkt_cnt[1] , \q_wc[1] , un6_wc_end_flag_a_4_cry_0, 
         un6_wc_end_flag_1, un6_wc_end_flag_2, \q_wc[0] , \lpkt_cnt_s[15] , 
         \lpkt_cnt_cry[14] , \lpkt_cnt_s[14] , \lpkt_cnt_s[13] , 
         \lpkt_cnt_cry[12] , \lpkt_cnt_s[12] , \lpkt_cnt_s[11] , 
         \lpkt_cnt_cry[10] , \lpkt_cnt_s[10] , \lpkt_cnt_s[9] , 
         \lpkt_cnt_cry[8] , \lpkt_cnt_s[8] , \lpkt_cnt_s[7] , 
         \lpkt_cnt_cry[6] , \lpkt_cnt_s[6] , \lpkt_cnt_s[5] , 
         \lpkt_cnt_cry[4] , \lpkt_cnt_s[4] , \lpkt_cnt_s[3] , 
         \lpkt_cnt_cry[2] , \lpkt_cnt_s[2] , \lpkt_cnt_s[1] , \byte_datab_c[3] , 
         \byte_datab_c[2] , \byte_datab_c[1] , \byte_datab_c[0] , \tmp1[1] , 
         \tmp1[0] , \q_byte_datab_CR31_ram/WAD0_INT , 
         \q_byte_datab_CR31_ram/WAD1_INT , \q_byte_datab_CR31_ram/WAD2_INT , 
         \q_byte_datab_CR31_ram/WAD3_INT , \q_byte_datab_CR31_ram/WD0_INT , 
         \q_byte_datab_CR31_ram/WD1_INT , \q_byte_datab_CR31_ram/WD2_INT , 
         \q_byte_datab_CR31_ram/WD3_INT , \tmp2[1] , \tmp1_i[0] , 
         q_byte_datab_CR31_ram_DO0, q_byte_datab_CR31_ram_DO1, 
         q_byte_datab_CR31_ram_DO2, q_byte_datab_CR31_ram_DO3, 
         \q_byte_datab_and[7] , \q_byte_datab_and[6] , \q_byte_datab_and[5] , 
         \q_byte_datab_and[4] , \u_PH_DLY_FIFO/wptr_2 , \u_PH_DLY_FIFO/wptr_1 , 
         \u_PH_DLY_FIFO/wptr_0 , \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT , \u_PH_DLY_FIFO/rptr_2 , 
         \u_PH_DLY_FIFO/rptr_1 , \u_PH_DLY_FIFO/rptr_0 , 
         \u_PH_DLY_FIFO/rdataout5 , \u_PH_DLY_FIFO/rdataout4 , 
         \byte_datab_fifo[4] , \byte_datab_fifo[5] , \u_PH_DLY_FIFO/rdataout7 , 
         \u_PH_DLY_FIFO/rdataout6 , \byte_datab_fifo[6] , \byte_datab_fifo[7] , 
         \q_byte_datab_and[3] , \q_byte_datab_and[2] , \q_byte_datab_and[1] , 
         \q_byte_datab_and[0] , \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT , 
         \u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT , \u_PH_DLY_FIFO/rdataout1 , 
         \u_PH_DLY_FIFO/rdataout0 , \byte_datab_fifo[0] , \byte_datab_fifo[1] , 
         \u_PH_DLY_FIFO/rdataout3 , \u_PH_DLY_FIFO/rdataout2 , 
         \byte_datab_fifo[2] , \byte_datab_fifo[3] , \byte_datab_c[7] , 
         \byte_datab_c[6] , \byte_datab_c[5] , \byte_datab_c[4] , 
         \q_byte_datab_CR31_ram_0/WAD0_INT , \q_byte_datab_CR31_ram_0/WAD1_INT , 
         \q_byte_datab_CR31_ram_0/WAD2_INT , \q_byte_datab_CR31_ram_0/WAD3_INT , 
         \q_byte_datab_CR31_ram_0/WD0_INT , \q_byte_datab_CR31_ram_0/WD1_INT , 
         \q_byte_datab_CR31_ram_0/WD2_INT , \q_byte_datab_CR31_ram_0/WD3_INT , 
         q_byte_datab_CR31_ram_0_DO0, q_byte_datab_CR31_ram_0_DO1, 
         q_byte_datab_CR31_ram_0_DO2, q_byte_datab_CR31_ram_0_DO3, \PH_cnt[3] , 
         \PH_cnt[2] , \PH_cnt[1] , \PH_cnt[0] , DataID_En_2, DataID_En, 
         ECC_En_2, ECC_En, q_chksum_En, chksum_En, q_long_pkt_indicator, 
         EoTp_c, N_390_i, \EoTp_En[0] , N_391, \EoTp_En[1] , \vccb\000/BUF1 , 
         G_1, G_2, long_en_c, q_short_en, short_en_c, 
         un1_q_long_pkt_indicator_1_1_i, un1_q_long_pkt_indicator_1_i, PH_En, 
         un3_q_wc_0, \PH_cnt_RNO[1] , \un7_PH_cnt_0[0] , CO1, 
         \un7_PH_cnt_0[3] , \PH_cnt_RNO[2] , WC_0_En_2, WC_0_En, G_3, 
         WC_1_En_2, WC_1_En, hsSync_En, N_40, N_42, N_18, N_38_i, bytepkt_en_c, 
         un6_wc_end_flag_NE_12, un6_wc_end_flag_NE_5, un6_wc_end_flag_NE_14, 
         un6_wc_end_flag_NE_10, un6_wc_end_flag_NE_9, un6_wc_end_flag_NE_i, 
         hsSync_En_2, un11_lpkt_cnt_En, un2_lpkt_cnt_En, un14_lpkt_cnt_En_i, 
         un87_q_ECC_0_a2_5, un87_q_ECC_0_a2_4, N_22, N_21, un108_q_ECC_0_a2_5, 
         un108_q_ECC_0_a2_4, un87_q_ECC, un108_q_ECC_0_a2, un5_q_ECC_0, 
         \q_ECC[0] , \q_ECC[1] , un47_q_ECC_0_a2_6, un47_q_ECC_0_a2_5, 
         un47_q_ECC_0_a2_4_0, un47_q_ECC_0_a2_4, un67_q_ECC_4, 
         un67_q_ECC_0_a2_5, un67_q_ECC_0_a2_4, un47_q_ECC_0_a2, un67_q_ECC, 
         \q_ECC[2] , \q_ECC[3] , un7_q_ECC_0_a2_8, un7_q_ECC_0_a2_4, 
         un27_q_ECC_0_a2_5, un27_q_ECC_0_a2_4, un7_q_ECC, un27_q_ECC_0_a2, 
         \q_ECC[4] , \q_ECC[5] , un2_q_long_pkt_indicator_i, 
         \u_PH_DLY_FIFO/r_gdata_1 , \u_PH_DLY_FIFO/r_gdata_0 , 
         \u_PH_DLY_FIFO/r_gcount_0 , \u_PH_DLY_FIFO/r_gcount_1 , 
         \u_PH_DLY_FIFO/r_gdata_2 , \u_PH_DLY_FIFO/r_gcount_2 , 
         \u_PH_DLY_FIFO/r_gcount_3 , \u_PH_DLY_FIFO/w_gdata_1 , 
         \u_PH_DLY_FIFO/w_gdata_0 , \u_PH_DLY_FIFO/w_gdata_2 , gndb, 
         \u_PH_DLY_FIFO/wptr_3 , un15_bytepkt, un21_bytepkt, un18_bytepkt, 
         \q_chksum[11] , \q_chksum[3] , \bytepkt_2_iv_4[3] , 
         \bytepkt_2_iv_3[3] , \bytepkt_2_iv_i[3] , \EoTp_En[2] , 
         \bytepkt_2_iv_4[2] , \bytepkt_2_iv_3[2] , N_46, N_17, \bytepkt_2[2] , 
         \bytepkt_2_iv_4[1] , \bytepkt_2_iv_3[1] , \bytepkt_2[1] , 
         \q_chksum[8] , \q_chksum[0] , \bytepkt_2_iv_4[0] , 
         \bytepkt_2_iv_3[0] , \bytepkt_2[0] , \q_chksum[6] , 
         \bytepkt_2_1_iv_3[6] , \bytepkt_2_1_iv_1[6] , \bytepkt_2[6] , 
         \q_chksum[15] , \bytepkt_2_0_iv_4[7] , \bytepkt_2_0_iv_2[7] , 
         \bytepkt_2[7] , hsSync_En_m, \bytepkt_2_iv_1[5] , \bytepkt_2_iv_0[5] , 
         \q_chksum[5] , \bytepkt_2_iv_5[5] , \bytepkt_2_iv_3[5] , 
         \bytepkt_2[5] , \bytepkt_2_iv_1[4] , \bytepkt_2_iv_0[4] , 
         \q_chksum[4] , \bytepkt_2_iv_5[4] , \bytepkt_2_iv_3[4] , 
         \bytepkt_2[4] , \q_vc[1] , \bytepkt_2_0_iv_0[7] , N_303, \q_vc[0] , 
         \bytepkt_2_1_iv_0[6] , \q_chksum[10] , \bytepkt_2_iv_1[2] , 
         \bytepkt_2_iv_0[2] , \bytepkt_2_iv_1[3] , \bytepkt_2_iv_0[3] , 
         \EoTp_En[3] , \bytepkt_2_iv_1[0] , \bytepkt_2_iv_0[0] , \q_chksum[9] , 
         \bytepkt_2_iv_1[1] , \bytepkt_2_iv_0[1] , \bytepkt_2_0_a2_0[6] , 
         un5_q_long_pkt_indicator, un7_q_ECC_0_a2_5, un6_wc_end_flag_NE_8, 
         \u_PH_DLY_FIFO/rptr_3 , \q_chksum[1] , \q_chksum[7] , \q_chksum[13] , 
         \q_chksum[14] , \q_dt[0] , \q_dt[3] , \q_dt[1] , \q_dt[5] , \q_dt[2] , 
         \q_dt[4] , q_bytepkt_en, \q_chksum[2] , \q_chksum[12] , reset_n_c, 
         \bytepkt_c[7] , \bytepkt_c[6] , \bytepkt_c[5] , \bytepkt_c[4] , 
         \bytepkt_c[3] , \bytepkt_c[2] , \bytepkt_c[1] , \bytepkt_c[0] , 
         \chksum_c[15] , chksum_rdy_c, \chksum_c[14] , \chksum_c[13] , 
         \chksum_c[12] , \chksum_c[11] , \chksum_c[10] , \chksum_c[9] , 
         \chksum_c[8] , \chksum_c[7] , \chksum_c[6] , \chksum_c[5] , 
         \chksum_c[4] , \chksum_c[3] , \chksum_c[2] , \chksum_c[1] , 
         \chksum_c[0] , \wc_c[15] , \wc_c[14] , \wc_c[13] , \wc_c[12] , 
         \wc_c[11] , \wc_c[10] , \wc_c[9] , \wc_c[8] , \wc_c[7] , \wc_c[6] , 
         \wc_c[5] , \wc_c[4] , \wc_c[3] , \wc_c[2] , \wc_c[1] , \wc_c[0] , 
         \dt_c[5] , \dt_c[4] , \dt_c[3] , \dt_c[2] , \dt_c[1] , \dt_c[0] , 
         \vc_c[1] , \vc_c[0] , vccbI;

  SLICEb_0 SLICEb_0( .B1(\lpkt_cnt[0] ), .A1(lpkt_cnt), .B0(lpkt_cnt), 
    .DI1(\lpkt_cnt_s[0] ), .CLK(byte_clk_c), .F1(\lpkt_cnt_s[0] ), 
    .Q1(\lpkt_cnt[0] ), .FCO(\lpkt_cnt_cry[0] ));
  u_PH_DLY_FIFO_SLICEb_1 \u_PH_DLY_FIFO/SLICEb_1 ( .A1(\u_PH_DLY_FIFO/rcount_3 ), 
    .A0(\u_PH_DLY_FIFO/rcount_2 ), .DI1(\u_PH_DLY_FIFO/ircount_3 ), 
    .DI0(\u_PH_DLY_FIFO/ircount_2 ), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0_1 ), 
    .F0(\u_PH_DLY_FIFO/ircount_2 ), .Q0(\u_PH_DLY_FIFO/rcount_2 ), 
    .F1(\u_PH_DLY_FIFO/ircount_3 ), .Q1(\u_PH_DLY_FIFO/rcount_3 ));
  u_PH_DLY_FIFO_SLICEb_2 \u_PH_DLY_FIFO/SLICEb_2 ( .DI0(\u_PH_DLY_FIFO/full_d ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/full_d_c ), 
    .F0(\u_PH_DLY_FIFO/full_d ), .Q0(\u_PH_DLY_FIFO/FF_0_Q ));
  u_PH_DLY_FIFO_SLICEb_3 \u_PH_DLY_FIFO/SLICEb_3 ( 
    .B1(\u_PH_DLY_FIFO/wcount_r1 ), .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .B0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), .A0(\u_PH_DLY_FIFO/rcount_0 ), 
    .M1(\u_PH_DLY_FIFO/w_gcount_2 ), .M0(\u_PH_DLY_FIFO/w_gcount_3 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/cmp_ci ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r3 ), .Q1(\u_PH_DLY_FIFO/w_gcount_r2 ), 
    .FCO(\u_PH_DLY_FIFO/co0_2 ));
  u_PH_DLY_FIFO_SLICEb_4 \u_PH_DLY_FIFO/SLICEb_4 ( 
    .FCO(\u_PH_DLY_FIFO/w_gctr_ci ));
  u_PH_DLY_FIFO_SLICEb_5 \u_PH_DLY_FIFO/SLICEb_5 ( .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .A0(\u_PH_DLY_FIFO/wcount_0 ), .DI1(\u_PH_DLY_FIFO/iwcount_1 ), 
    .DI0(\u_PH_DLY_FIFO/iwcount_0 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .FCI(\u_PH_DLY_FIFO/w_gctr_ci ), .F0(\u_PH_DLY_FIFO/iwcount_0 ), 
    .Q0(\u_PH_DLY_FIFO/wcount_0 ), .F1(\u_PH_DLY_FIFO/iwcount_1 ), 
    .Q1(\u_PH_DLY_FIFO/wcount_1 ), .FCO(\u_PH_DLY_FIFO/co0 ));
  u_PH_DLY_FIFO_SLICEb_6 \u_PH_DLY_FIFO/SLICEb_6 ( .A1(\u_PH_DLY_FIFO/wcount_3 ), 
    .A0(\u_PH_DLY_FIFO/wcount_2 ), .DI1(\u_PH_DLY_FIFO/iwcount_3 ), 
    .DI0(\u_PH_DLY_FIFO/iwcount_2 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0 ), 
    .F0(\u_PH_DLY_FIFO/iwcount_2 ), .Q0(\u_PH_DLY_FIFO/wcount_2 ), 
    .F1(\u_PH_DLY_FIFO/iwcount_3 ), .Q1(\u_PH_DLY_FIFO/wcount_3 ));
  SLICEb_7 SLICEb_7( .M1(q_long_en_1), .M0(q_long_en), .CLK(byte_clk_c), 
    .Q0(q_long_en_1), .Q1(q_long_en_2), .FCO(\u_PH_DLY_FIFO/r_gctr_ci ));
  u_PH_DLY_FIFO_SLICEb_8 \u_PH_DLY_FIFO/SLICEb_8 ( .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .A0(\u_PH_DLY_FIFO/rcount_0 ), .DI1(\u_PH_DLY_FIFO/ircount_1 ), 
    .DI0(\u_PH_DLY_FIFO/ircount_0 ), .CE(\u_PH_DLY_FIFO/rden_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .FCI(\u_PH_DLY_FIFO/r_gctr_ci ), .F0(\u_PH_DLY_FIFO/ircount_0 ), 
    .Q0(\u_PH_DLY_FIFO/rcount_0 ), .F1(\u_PH_DLY_FIFO/ircount_1 ), 
    .Q1(\u_PH_DLY_FIFO/rcount_1 ), .FCO(\u_PH_DLY_FIFO/co0_1 ));
  u_PH_DLY_FIFO_SLICEb_9 \u_PH_DLY_FIFO/SLICEb_9 ( .B1(\u_PH_DLY_FIFO/rden_i ), 
    .A1(\u_PH_DLY_FIFO/rden_i ), .M1(\u_PH_DLY_FIFO/r_gcount_w2 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_w3 ), .LSR(un1_q_bytepkt_en_0), 
    .CLK(byte_clk_c), .Q0(\u_PH_DLY_FIFO/r_gcount_w23 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w22 ), .FCO(\u_PH_DLY_FIFO/cmp_ci ));
  u_PH_DLY_FIFO_SLICEb_10 \u_PH_DLY_FIFO/SLICEb_10 ( 
    .DI0(\u_PH_DLY_FIFO/empty_d ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .FCI(\u_PH_DLY_FIFO/empty_d_c ), .F0(\u_PH_DLY_FIFO/empty_d ), 
    .Q0(\u_PH_DLY_FIFO/FF_1_Q ));
  u_PH_DLY_FIFO_SLICEb_11 \u_PH_DLY_FIFO/SLICEb_11 ( .B1(\u_PH_DLY_FIFO/wren_i ), 
    .A1(\u_PH_DLY_FIFO/wren_i ), .M1(\u_PH_DLY_FIFO/w_gcount_r0 ), 
    .M0(\u_PH_DLY_FIFO/w_gcount_r1 ), .LSR(un1_q_bytepkt_en_0), 
    .CLK(byte_clk_c), .Q0(\u_PH_DLY_FIFO/w_gcount_r21 ), 
    .Q1(\u_PH_DLY_FIFO/w_gcount_r20 ), .FCO(\u_PH_DLY_FIFO/cmp_ci_1 ));
  u_PH_DLY_FIFO_SLICEb_12 \u_PH_DLY_FIFO/SLICEb_12 ( 
    .B1(\u_PH_DLY_FIFO/full_cmp_clr ), .A1(\u_PH_DLY_FIFO/full_cmp_set ), 
    .B0(\u_PH_DLY_FIFO/rcount_w2 ), .A0(\u_PH_DLY_FIFO/wcount_2 ), 
    .M1(\u_PH_DLY_FIFO/w_gcount_r2 ), .M0(\u_PH_DLY_FIFO/w_gcount_r3 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0_3 ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r23 ), .Q1(\u_PH_DLY_FIFO/w_gcount_r22 ), 
    .FCO(\u_PH_DLY_FIFO/full_d_c ));
  u_PH_DLY_FIFO_SLICEb_13 \u_PH_DLY_FIFO/SLICEb_13 ( 
    .B1(\u_PH_DLY_FIFO/rcount_w1 ), .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .B0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), .A0(\u_PH_DLY_FIFO/wcount_0 ), 
    .M1(\u_PH_DLY_FIFO/r_gcount_w0 ), .M0(\u_PH_DLY_FIFO/r_gcount_w1 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/cmp_ci_1 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w21 ), .Q1(\u_PH_DLY_FIFO/r_gcount_w20 ), 
    .FCO(\u_PH_DLY_FIFO/co0_3 ));
  u_PH_DLY_FIFO_SLICEb_14 \u_PH_DLY_FIFO/SLICEb_14 ( 
    .B1(\u_PH_DLY_FIFO/empty_cmp_clr ), .A1(\u_PH_DLY_FIFO/empty_cmp_set ), 
    .B0(\u_PH_DLY_FIFO/wcount_r2 ), .A0(\u_PH_DLY_FIFO/rcount_2 ), 
    .M1(\u_PH_DLY_FIFO/w_gcount_0 ), .M0(\u_PH_DLY_FIFO/w_gcount_1 ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .FCI(\u_PH_DLY_FIFO/co0_2 ), 
    .Q0(\u_PH_DLY_FIFO/w_gcount_r1 ), .Q1(\u_PH_DLY_FIFO/w_gcount_r0 ), 
    .FCO(\u_PH_DLY_FIFO/empty_d_c ));
  SLICEb_15 SLICEb_15( .B0(\lpkt_cnt[15] ), .A0(\q_wc[15] ), 
    .FCI(un6_wc_end_flag_a_4_cry_14), .F0(un6_wc_end_flag_15), 
    .F1(\un6_wc_end_flag_a_4_i[16] ));
  SLICEb_16 SLICEb_16( .B1(\lpkt_cnt[14] ), .A1(\q_wc[14] ), .B0(\lpkt_cnt[13] ), 
    .A0(\q_wc[13] ), .FCI(un6_wc_end_flag_a_4_cry_12), .F0(un6_wc_end_flag_13), 
    .F1(un6_wc_end_flag_14), .FCO(un6_wc_end_flag_a_4_cry_14));
  SLICEb_17 SLICEb_17( .B1(\lpkt_cnt[12] ), .A1(\q_wc[12] ), .B0(\lpkt_cnt[11] ), 
    .A0(\q_wc[11] ), .FCI(un6_wc_end_flag_a_4_cry_10), .F0(un6_wc_end_flag_11), 
    .F1(un6_wc_end_flag_12), .FCO(un6_wc_end_flag_a_4_cry_12));
  SLICEb_18 SLICEb_18( .B1(\lpkt_cnt[10] ), .A1(\q_wc[10] ), .B0(\lpkt_cnt[9] ), 
    .A0(\q_wc[9] ), .FCI(un6_wc_end_flag_a_4_cry_8), .F0(un6_wc_end_flag_9), 
    .F1(un6_wc_end_flag_10), .FCO(un6_wc_end_flag_a_4_cry_10));
  SLICEb_19 SLICEb_19( .B1(\lpkt_cnt[8] ), .A1(\q_wc[8] ), .B0(\lpkt_cnt[7] ), 
    .A0(\q_wc[7] ), .FCI(un6_wc_end_flag_a_4_cry_6), .F0(un6_wc_end_flag_7), 
    .F1(un6_wc_end_flag_8), .FCO(un6_wc_end_flag_a_4_cry_8));
  SLICEb_20 SLICEb_20( .B1(\lpkt_cnt[6] ), .A1(\q_wc[6] ), .B0(\lpkt_cnt[5] ), 
    .A0(\q_wc[5] ), .FCI(un6_wc_end_flag_a_4_cry_4), .F0(un6_wc_end_flag_5), 
    .F1(un6_wc_end_flag_6), .FCO(un6_wc_end_flag_a_4_cry_6));
  SLICEb_21 SLICEb_21( .B1(\lpkt_cnt[4] ), .A1(\q_wc[4] ), .B0(\lpkt_cnt[3] ), 
    .A0(\q_wc[3] ), .FCI(un6_wc_end_flag_a_4_cry_2), .F0(un6_wc_end_flag_3), 
    .F1(un6_wc_end_flag_4), .FCO(un6_wc_end_flag_a_4_cry_4));
  SLICEb_22 SLICEb_22( .B1(\lpkt_cnt[2] ), .A1(\q_wc[2] ), .B0(\lpkt_cnt[1] ), 
    .A0(\q_wc[1] ), .FCI(un6_wc_end_flag_a_4_cry_0), .F0(un6_wc_end_flag_1), 
    .F1(un6_wc_end_flag_2), .FCO(un6_wc_end_flag_a_4_cry_2));
  SLICEb_23 SLICEb_23( .B1(\lpkt_cnt[0] ), .A1(\q_wc[0] ), 
    .FCO(un6_wc_end_flag_a_4_cry_0));
  SLICEb_24 SLICEb_24( .B0(\lpkt_cnt[15] ), .A0(lpkt_cnt), 
    .DI0(\lpkt_cnt_s[15] ), .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[14] ), 
    .F0(\lpkt_cnt_s[15] ), .Q0(\lpkt_cnt[15] ));
  SLICEb_25 SLICEb_25( .B1(\lpkt_cnt[14] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[13] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[14] ), .DI0(\lpkt_cnt_s[13] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[12] ), .F0(\lpkt_cnt_s[13] ), 
    .Q0(\lpkt_cnt[13] ), .F1(\lpkt_cnt_s[14] ), .Q1(\lpkt_cnt[14] ), 
    .FCO(\lpkt_cnt_cry[14] ));
  SLICEb_26 SLICEb_26( .B1(\lpkt_cnt[12] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[11] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[12] ), .DI0(\lpkt_cnt_s[11] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[10] ), .F0(\lpkt_cnt_s[11] ), 
    .Q0(\lpkt_cnt[11] ), .F1(\lpkt_cnt_s[12] ), .Q1(\lpkt_cnt[12] ), 
    .FCO(\lpkt_cnt_cry[12] ));
  SLICEb_27 SLICEb_27( .B1(\lpkt_cnt[10] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[9] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[10] ), .DI0(\lpkt_cnt_s[9] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[8] ), .F0(\lpkt_cnt_s[9] ), 
    .Q0(\lpkt_cnt[9] ), .F1(\lpkt_cnt_s[10] ), .Q1(\lpkt_cnt[10] ), 
    .FCO(\lpkt_cnt_cry[10] ));
  SLICEb_28 SLICEb_28( .B1(\lpkt_cnt[8] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[7] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[8] ), .DI0(\lpkt_cnt_s[7] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[6] ), .F0(\lpkt_cnt_s[7] ), 
    .Q0(\lpkt_cnt[7] ), .F1(\lpkt_cnt_s[8] ), .Q1(\lpkt_cnt[8] ), 
    .FCO(\lpkt_cnt_cry[8] ));
  SLICEb_29 SLICEb_29( .B1(\lpkt_cnt[6] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[5] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[6] ), .DI0(\lpkt_cnt_s[5] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[4] ), .F0(\lpkt_cnt_s[5] ), 
    .Q0(\lpkt_cnt[5] ), .F1(\lpkt_cnt_s[6] ), .Q1(\lpkt_cnt[6] ), 
    .FCO(\lpkt_cnt_cry[6] ));
  SLICEb_30 SLICEb_30( .B1(\lpkt_cnt[4] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[3] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[4] ), .DI0(\lpkt_cnt_s[3] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[2] ), .F0(\lpkt_cnt_s[3] ), 
    .Q0(\lpkt_cnt[3] ), .F1(\lpkt_cnt_s[4] ), .Q1(\lpkt_cnt[4] ), 
    .FCO(\lpkt_cnt_cry[4] ));
  SLICEb_31 SLICEb_31( .B1(\lpkt_cnt[2] ), .A1(lpkt_cnt), .B0(\lpkt_cnt[1] ), 
    .A0(lpkt_cnt), .DI1(\lpkt_cnt_s[2] ), .DI0(\lpkt_cnt_s[1] ), 
    .CLK(byte_clk_c), .FCI(\lpkt_cnt_cry[0] ), .F0(\lpkt_cnt_s[1] ), 
    .Q0(\lpkt_cnt[1] ), .F1(\lpkt_cnt_s[2] ), .Q1(\lpkt_cnt[2] ), 
    .FCO(\lpkt_cnt_cry[2] ));
  q_byte_datab_CR31_ram_SLICEb_32 \q_byte_datab_CR31_ram/SLICEb_32 ( 
    .D1(\byte_datab_c[3] ), .C1(\byte_datab_c[2] ), .B1(\byte_datab_c[1] ), 
    .A1(\byte_datab_c[0] ), .B0(\tmp1[1] ), .A0(\tmp1[0] ), 
    .WADO0(\q_byte_datab_CR31_ram/WAD0_INT ), 
    .WADO1(\q_byte_datab_CR31_ram/WAD1_INT ), 
    .WADO2(\q_byte_datab_CR31_ram/WAD2_INT ), 
    .WADO3(\q_byte_datab_CR31_ram/WAD3_INT ), 
    .WDO0(\q_byte_datab_CR31_ram/WD0_INT ), 
    .WDO1(\q_byte_datab_CR31_ram/WD1_INT ), 
    .WDO2(\q_byte_datab_CR31_ram/WD2_INT ), 
    .WDO3(\q_byte_datab_CR31_ram/WD3_INT ));
  q_byte_datab_CR31_ram_SLICEb_33 \q_byte_datab_CR31_ram/SLICEb_33 ( 
    .B1(\tmp2[1] ), .A1(\tmp1_i[0] ), .B0(\tmp2[1] ), .A0(\tmp1_i[0] ), 
    .WCK(byte_clk_c), .F0(q_byte_datab_CR31_ram_DO0), 
    .F1(q_byte_datab_CR31_ram_DO1), .WAD0(\q_byte_datab_CR31_ram/WAD0_INT ), 
    .WAD1(\q_byte_datab_CR31_ram/WAD1_INT ), 
    .WAD2(\q_byte_datab_CR31_ram/WAD2_INT ), 
    .WAD3(\q_byte_datab_CR31_ram/WAD3_INT ), 
    .WD0(\q_byte_datab_CR31_ram/WD0_INT ), .WD1(\q_byte_datab_CR31_ram/WD1_INT ));
  q_byte_datab_CR31_ram_SLICEb_34 \q_byte_datab_CR31_ram/SLICEb_34 ( 
    .B1(\tmp2[1] ), .A1(\tmp1_i[0] ), .B0(\tmp2[1] ), .A0(\tmp1_i[0] ), 
    .WCK(byte_clk_c), .F0(q_byte_datab_CR31_ram_DO2), 
    .F1(q_byte_datab_CR31_ram_DO3), .WAD0(\q_byte_datab_CR31_ram/WAD0_INT ), 
    .WAD1(\q_byte_datab_CR31_ram/WAD1_INT ), 
    .WAD2(\q_byte_datab_CR31_ram/WAD2_INT ), 
    .WAD3(\q_byte_datab_CR31_ram/WAD3_INT ), 
    .WD0(\q_byte_datab_CR31_ram/WD2_INT ), .WD1(\q_byte_datab_CR31_ram/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_6_1 \u_PH_DLY_FIFO/fifo_pfu_0_6.1 ( 
    .D1(\q_byte_datab_and[7] ), .C1(\q_byte_datab_and[6] ), 
    .B1(\q_byte_datab_and[5] ), .A1(\q_byte_datab_and[4] ), 
    .C0(\u_PH_DLY_FIFO/wptr_2 ), .B0(\u_PH_DLY_FIFO/wptr_1 ), 
    .A0(\u_PH_DLY_FIFO/wptr_0 ), .WADO0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ), 
    .WADO1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ), 
    .WADO2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ), 
    .WADO3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ), 
    .WDO0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT ), 
    .WDO1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT ), 
    .WDO2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT ), 
    .WDO3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_6_0 \u_PH_DLY_FIFO/fifo_pfu_0_6.0 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout5 ), .DI0(\u_PH_DLY_FIFO/rdataout4 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout4 ), .Q0(\byte_datab_fifo[4] ), 
    .F1(\u_PH_DLY_FIFO/rdataout5 ), .Q1(\byte_datab_fifo[5] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_6 \u_PH_DLY_FIFO/fifo_pfu_0_6 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout7 ), .DI0(\u_PH_DLY_FIFO/rdataout6 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout6 ), .Q0(\byte_datab_fifo[6] ), 
    .F1(\u_PH_DLY_FIFO/rdataout7 ), .Q1(\byte_datab_fifo[7] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_7_3 \u_PH_DLY_FIFO/fifo_pfu_0_7.3 ( 
    .D1(\q_byte_datab_and[3] ), .C1(\q_byte_datab_and[2] ), 
    .B1(\q_byte_datab_and[1] ), .A1(\q_byte_datab_and[0] ), 
    .C0(\u_PH_DLY_FIFO/wptr_2 ), .B0(\u_PH_DLY_FIFO/wptr_1 ), 
    .A0(\u_PH_DLY_FIFO/wptr_0 ), .WADO0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ), 
    .WADO1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ), 
    .WADO2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ), 
    .WADO3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ), 
    .WDO0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT ), 
    .WDO1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT ), 
    .WDO2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT ), 
    .WDO3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_7 \u_PH_DLY_FIFO/fifo_pfu_0_7 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout1 ), .DI0(\u_PH_DLY_FIFO/rdataout0 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout0 ), .Q0(\byte_datab_fifo[0] ), 
    .F1(\u_PH_DLY_FIFO/rdataout1 ), .Q1(\byte_datab_fifo[1] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT ));
  u_PH_DLY_FIFO_fifo_pfu_0_7_2 \u_PH_DLY_FIFO/fifo_pfu_0_7.2 ( 
    .C1(\u_PH_DLY_FIFO/rptr_2 ), .B1(\u_PH_DLY_FIFO/rptr_1 ), 
    .A1(\u_PH_DLY_FIFO/rptr_0 ), .C0(\u_PH_DLY_FIFO/rptr_2 ), 
    .B0(\u_PH_DLY_FIFO/rptr_1 ), .A0(\u_PH_DLY_FIFO/rptr_0 ), 
    .DI1(\u_PH_DLY_FIFO/rdataout3 ), .DI0(\u_PH_DLY_FIFO/rdataout2 ), 
    .WRE(\u_PH_DLY_FIFO/wren_i ), .WCK(byte_clk_c), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/rdataout2 ), .Q0(\byte_datab_fifo[2] ), 
    .F1(\u_PH_DLY_FIFO/rdataout3 ), .Q1(\byte_datab_fifo[3] ), 
    .WAD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ), 
    .WAD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ), 
    .WAD2(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ), 
    .WAD3(\u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ), 
    .WD0(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT ), 
    .WD1(\u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT ));
  q_byte_datab_CR31_ram_0_SLICEb_41 \q_byte_datab_CR31_ram_0/SLICEb_41 ( 
    .D1(\byte_datab_c[7] ), .C1(\byte_datab_c[6] ), .B1(\byte_datab_c[5] ), 
    .A1(\byte_datab_c[4] ), .B0(\tmp1[1] ), .A0(\tmp1[0] ), 
    .WADO0(\q_byte_datab_CR31_ram_0/WAD0_INT ), 
    .WADO1(\q_byte_datab_CR31_ram_0/WAD1_INT ), 
    .WADO2(\q_byte_datab_CR31_ram_0/WAD2_INT ), 
    .WADO3(\q_byte_datab_CR31_ram_0/WAD3_INT ), 
    .WDO0(\q_byte_datab_CR31_ram_0/WD0_INT ), 
    .WDO1(\q_byte_datab_CR31_ram_0/WD1_INT ), 
    .WDO2(\q_byte_datab_CR31_ram_0/WD2_INT ), 
    .WDO3(\q_byte_datab_CR31_ram_0/WD3_INT ));
  q_byte_datab_CR31_ram_0_SLICEb_42 \q_byte_datab_CR31_ram_0/SLICEb_42 ( 
    .B1(\tmp2[1] ), .A1(\tmp1_i[0] ), .B0(\tmp2[1] ), .A0(\tmp1_i[0] ), 
    .WCK(byte_clk_c), .F0(q_byte_datab_CR31_ram_0_DO0), 
    .F1(q_byte_datab_CR31_ram_0_DO1), .WAD0(\q_byte_datab_CR31_ram_0/WAD0_INT ), 
    .WAD1(\q_byte_datab_CR31_ram_0/WAD1_INT ), 
    .WAD2(\q_byte_datab_CR31_ram_0/WAD2_INT ), 
    .WAD3(\q_byte_datab_CR31_ram_0/WAD3_INT ), 
    .WD0(\q_byte_datab_CR31_ram_0/WD0_INT ), 
    .WD1(\q_byte_datab_CR31_ram_0/WD1_INT ));
  q_byte_datab_CR31_ram_0_SLICEb_43 \q_byte_datab_CR31_ram_0/SLICEb_43 ( 
    .B1(\tmp2[1] ), .A1(\tmp1_i[0] ), .B0(\tmp2[1] ), .A0(\tmp1_i[0] ), 
    .WCK(byte_clk_c), .F0(q_byte_datab_CR31_ram_0_DO2), 
    .F1(q_byte_datab_CR31_ram_0_DO3), .WAD0(\q_byte_datab_CR31_ram_0/WAD0_INT ), 
    .WAD1(\q_byte_datab_CR31_ram_0/WAD1_INT ), 
    .WAD2(\q_byte_datab_CR31_ram_0/WAD2_INT ), 
    .WAD3(\q_byte_datab_CR31_ram_0/WAD3_INT ), 
    .WD0(\q_byte_datab_CR31_ram_0/WD2_INT ), 
    .WD1(\q_byte_datab_CR31_ram_0/WD3_INT ));
  SLICEb_44 SLICEb_44( .D0(\PH_cnt[3] ), .C0(\PH_cnt[2] ), .B0(\PH_cnt[1] ), 
    .A0(\PH_cnt[0] ), .DI0(DataID_En_2), .CLK(byte_clk_c), .F0(DataID_En_2), 
    .Q0(DataID_En));
  SLICEb_45 SLICEb_45( .D0(\PH_cnt[3] ), .C0(\PH_cnt[2] ), .B0(\PH_cnt[1] ), 
    .A0(\PH_cnt[0] ), .DI0(ECC_En_2), .CLK(byte_clk_c), .F0(ECC_En_2), 
    .Q0(ECC_En));
  SLICEb_46 SLICEb_46( .C1(q_chksum_En), .B1(lpkt_cnt), .A1(chksum_En), 
    .D0(q_long_pkt_indicator), .C0(q_chksum_En), .B0(EoTp_c), .A0(ECC_En), 
    .DI0(N_390_i), .M1(\EoTp_En[0] ), .CLK(byte_clk_c), .F0(N_390_i), 
    .Q0(\EoTp_En[0] ), .F1(N_391), .Q1(\EoTp_En[1] ));
  SLICEb_48 SLICEb_48( .DI0(\vccb\000/BUF1 ), .M1(G_1), .CLK(byte_clk_c), 
    .F0(\vccb\000/BUF1 ), .Q0(G_1), .Q1(G_2));
  SLICEb_50 SLICEb_50( .C1(long_en_c), .B1(q_long_en), .A1(q_short_en), 
    .D0(long_en_c), .C0(q_long_en), .B0(q_short_en), .A0(short_en_c), 
    .DI0(un1_q_long_pkt_indicator_1_1_i), .CE(un1_q_long_pkt_indicator_1_i), 
    .CLK(byte_clk_c), .F0(un1_q_long_pkt_indicator_1_1_i), .Q0(PH_En), 
    .F1(un3_q_wc_0));
  SLICEb_51 SLICEb_51( .B1(\PH_cnt[1] ), .A1(\PH_cnt[0] ), .B0(\PH_cnt[0] ), 
    .A0(PH_En), .DI1(\PH_cnt_RNO[1] ), .DI0(\un7_PH_cnt_0[0] ), 
    .CLK(byte_clk_c), .F0(\un7_PH_cnt_0[0] ), .Q0(\PH_cnt[0] ), 
    .F1(\PH_cnt_RNO[1] ), .Q1(\PH_cnt[1] ));
  SLICEb_52 SLICEb_52( .D1(\PH_cnt[3] ), .C1(\PH_cnt[2] ), .B1(PH_En), .A1(CO1), 
    .C0(\PH_cnt[0] ), .B0(\PH_cnt[1] ), .A0(\PH_cnt[2] ), 
    .DI1(\un7_PH_cnt_0[3] ), .DI0(\PH_cnt_RNO[2] ), .CLK(byte_clk_c), 
    .F0(\PH_cnt_RNO[2] ), .Q0(\PH_cnt[2] ), .F1(\un7_PH_cnt_0[3] ), 
    .Q1(\PH_cnt[3] ));
  SLICEb_53 SLICEb_53( .D0(\PH_cnt[0] ), .C0(\PH_cnt[1] ), .B0(\PH_cnt[2] ), 
    .A0(\PH_cnt[3] ), .DI0(WC_0_En_2), .M1(G_2), .CLK(byte_clk_c), 
    .F0(WC_0_En_2), .Q0(WC_0_En), .Q1(G_3));
  SLICEb_54 SLICEb_54( .B1(\PH_cnt[1] ), .A1(\PH_cnt[0] ), .D0(\PH_cnt[3] ), 
    .C0(\PH_cnt[2] ), .B0(\PH_cnt[1] ), .A0(\PH_cnt[0] ), .DI0(WC_1_En_2), 
    .CLK(byte_clk_c), .F0(WC_1_En_2), .Q0(WC_1_En), .F1(CO1));
  SLICEb_55 SLICEb_55( .C1(hsSync_En), .B1(N_40), .A1(DataID_En), 
    .D0(\EoTp_En[0] ), .C0(N_42), .B0(N_391), .A0(N_18), .DI0(N_38_i), 
    .CLK(byte_clk_c), .F0(N_38_i), .Q0(bytepkt_en_c), .F1(N_42));
  SLICEb_56 SLICEb_56( .D1(un6_wc_end_flag_NE_12), .C1(un6_wc_end_flag_NE_5), 
    .B1(un6_wc_end_flag_11), .A1(un6_wc_end_flag_10), 
    .C0(un6_wc_end_flag_NE_14), .B0(un6_wc_end_flag_NE_10), 
    .A0(un6_wc_end_flag_NE_9), .DI0(un6_wc_end_flag_NE_i), .CLK(byte_clk_c), 
    .F0(un6_wc_end_flag_NE_i), .Q0(chksum_En), .F1(un6_wc_end_flag_NE_14));
  SLICEb_57 SLICEb_57( .D1(\PH_cnt[3] ), .C1(\PH_cnt[2] ), .B1(\PH_cnt[1] ), 
    .A1(\PH_cnt[0] ), .D0(\PH_cnt[3] ), .C0(\PH_cnt[2] ), .B0(\PH_cnt[1] ), 
    .A0(\PH_cnt[0] ), .DI0(hsSync_En_2), .CLK(byte_clk_c), .F0(hsSync_En_2), 
    .Q0(hsSync_En), .F1(un11_lpkt_cnt_En));
  SLICEb_58 SLICEb_58( .D1(un6_wc_end_flag_NE_14), .C1(un6_wc_end_flag_NE_10), 
    .B1(un6_wc_end_flag_NE_9), .A1(un2_lpkt_cnt_En), .B0(un11_lpkt_cnt_En), 
    .A0(q_long_pkt_indicator), .DI0(un2_lpkt_cnt_En), .CE(un14_lpkt_cnt_En_i), 
    .CLK(byte_clk_c), .F0(un2_lpkt_cnt_En), .Q0(lpkt_cnt), 
    .F1(un14_lpkt_cnt_En_i));
  SLICEb_59 SLICEb_59( .D1(un87_q_ECC_0_a2_5), .C1(un87_q_ECC_0_a2_4), .B1(N_22), 
    .A1(N_21), .D0(un108_q_ECC_0_a2_5), .C0(un108_q_ECC_0_a2_4), .B0(N_22), 
    .A0(N_21), .DI1(un87_q_ECC), .DI0(un108_q_ECC_0_a2), .CE(un5_q_ECC_0), 
    .CLK(byte_clk_c), .F0(un108_q_ECC_0_a2), .Q0(\q_ECC[0] ), .F1(un87_q_ECC), 
    .Q1(\q_ECC[1] ));
  SLICEb_60 SLICEb_60( .D1(un47_q_ECC_0_a2_6), .C1(un47_q_ECC_0_a2_5), 
    .B1(un47_q_ECC_0_a2_4_0), .A1(un47_q_ECC_0_a2_4), .D0(un67_q_ECC_4), 
    .C0(un67_q_ECC_0_a2_5), .B0(un67_q_ECC_0_a2_4), .A0(N_21), 
    .DI1(un47_q_ECC_0_a2), .DI0(un67_q_ECC), .CE(un5_q_ECC_0), 
    .CLK(byte_clk_c), .F0(un67_q_ECC), .Q0(\q_ECC[2] ), .F1(un47_q_ECC_0_a2), 
    .Q1(\q_ECC[3] ));
  SLICEb_61 SLICEb_61( .D1(un7_q_ECC_0_a2_8), .C1(un7_q_ECC_0_a2_4), 
    .B1(\q_wc[15] ), .A1(\q_wc[14] ), .D0(un47_q_ECC_0_a2_4), 
    .C0(un27_q_ECC_0_a2_5), .B0(un27_q_ECC_0_a2_4), .A0(N_22), .DI1(un7_q_ECC), 
    .DI0(un27_q_ECC_0_a2), .CE(un5_q_ECC_0), .CLK(byte_clk_c), 
    .F0(un27_q_ECC_0_a2), .Q0(\q_ECC[4] ), .F1(un7_q_ECC), .Q1(\q_ECC[5] ));
  SLICEb_65 SLICEb_65( .B1(q_short_en), .A1(q_long_en), .B0(short_en_c), 
    .A0(q_short_en), .DI0(un2_q_long_pkt_indicator_i), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), 
    .F0(un2_q_long_pkt_indicator_i), .Q0(q_long_pkt_indicator), 
    .F1(un5_q_ECC_0));
  SLICEb_66 SLICEb_66( .B1(\tmp1[1] ), .A1(\tmp1[0] ), .A0(\tmp1[0] ), 
    .DI1(\tmp2[1] ), .DI0(\tmp1_i[0] ), .CLK(byte_clk_c), .F0(\tmp1_i[0] ), 
    .Q0(\tmp1[0] ), .F1(\tmp2[1] ), .Q1(\tmp1[1] ));
  u_PH_DLY_FIFO_SLICEb_67 \u_PH_DLY_FIFO/SLICEb_67 ( 
    .B1(\u_PH_DLY_FIFO/rcount_2 ), .A1(\u_PH_DLY_FIFO/rcount_1 ), 
    .B0(\u_PH_DLY_FIFO/rcount_1 ), .A0(\u_PH_DLY_FIFO/rcount_0 ), 
    .DI1(\u_PH_DLY_FIFO/r_gdata_1 ), .DI0(\u_PH_DLY_FIFO/r_gdata_0 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/r_gdata_0 ), .Q0(\u_PH_DLY_FIFO/r_gcount_0 ), 
    .F1(\u_PH_DLY_FIFO/r_gdata_1 ), .Q1(\u_PH_DLY_FIFO/r_gcount_1 ));
  u_PH_DLY_FIFO_SLICEb_68 \u_PH_DLY_FIFO/SLICEb_68 ( 
    .B1(\u_PH_DLY_FIFO/w_gcount_r22 ), .A1(\u_PH_DLY_FIFO/w_gcount_r23 ), 
    .B0(\u_PH_DLY_FIFO/rcount_3 ), .A0(\u_PH_DLY_FIFO/rcount_2 ), 
    .DI0(\u_PH_DLY_FIFO/r_gdata_2 ), .M1(\u_PH_DLY_FIFO/rcount_3 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/r_gdata_2 ), .Q0(\u_PH_DLY_FIFO/r_gcount_2 ), 
    .F1(\u_PH_DLY_FIFO/wcount_r2 ), .Q1(\u_PH_DLY_FIFO/r_gcount_3 ));
  u_PH_DLY_FIFO_SLICEb_75 \u_PH_DLY_FIFO/SLICEb_75 ( 
    .B1(\u_PH_DLY_FIFO/wcount_2 ), .A1(\u_PH_DLY_FIFO/wcount_1 ), 
    .B0(\u_PH_DLY_FIFO/wcount_1 ), .A0(\u_PH_DLY_FIFO/wcount_0 ), 
    .DI1(\u_PH_DLY_FIFO/w_gdata_1 ), .DI0(\u_PH_DLY_FIFO/w_gdata_0 ), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/w_gdata_0 ), .Q0(\u_PH_DLY_FIFO/w_gcount_0 ), 
    .F1(\u_PH_DLY_FIFO/w_gdata_1 ), .Q1(\u_PH_DLY_FIFO/w_gcount_1 ));
  u_PH_DLY_FIFO_SLICEb_76 \u_PH_DLY_FIFO/SLICEb_76 ( 
    .B1(\u_PH_DLY_FIFO/r_gcount_w22 ), .A1(\u_PH_DLY_FIFO/r_gcount_w23 ), 
    .B0(\u_PH_DLY_FIFO/wcount_3 ), .A0(\u_PH_DLY_FIFO/wcount_2 ), 
    .DI0(\u_PH_DLY_FIFO/w_gdata_2 ), .M1(\u_PH_DLY_FIFO/wcount_3 ), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/w_gdata_2 ), .Q0(\u_PH_DLY_FIFO/w_gcount_2 ), 
    .F1(\u_PH_DLY_FIFO/rcount_w2 ), .Q1(\u_PH_DLY_FIFO/w_gcount_3 ));
  SLICEb_81 SLICEb_81( .M1(\u_PH_DLY_FIFO/wcount_1 ), 
    .M0(\u_PH_DLY_FIFO/wcount_0 ), .CE(\u_PH_DLY_FIFO/wren_i ), 
    .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), .F0(gndb), 
    .Q0(\u_PH_DLY_FIFO/wptr_0 ), .Q1(\u_PH_DLY_FIFO/wptr_1 ));
  SLICEb_82 SLICEb_82( .D1(\q_wc[12] ), .C1(\q_wc[10] ), .B1(\q_wc[9] ), 
    .A1(\q_wc[8] ), .B0(\u_PH_DLY_FIFO/FF_0_Q ), .A0(q_long_en_2), 
    .M1(\u_PH_DLY_FIFO/wcount_3 ), .M0(\u_PH_DLY_FIFO/wcount_2 ), 
    .CE(\u_PH_DLY_FIFO/wren_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/wren_i ), .Q0(\u_PH_DLY_FIFO/wptr_2 ), 
    .F1(un27_q_ECC_0_a2_5), .Q1(\u_PH_DLY_FIFO/wptr_3 ));
  SLICEb_83 SLICEb_83( .C1(WC_1_En), .B1(WC_0_En), .A1(ECC_En), .D0(DataID_En), 
    .C0(N_40), .B0(hsSync_En), .A0(lpkt_cnt), .F0(un15_bytepkt), .F1(N_40));
  SLICEb_84 SLICEb_84( .D1(un21_bytepkt), .C1(un18_bytepkt), .B1(\q_chksum[11] ), 
    .A1(\q_chksum[3] ), .D0(un15_bytepkt), .C0(\bytepkt_2_iv_4[3] ), 
    .B0(\bytepkt_2_iv_3[3] ), .A0(\byte_datab_fifo[3] ), 
    .F0(\bytepkt_2_iv_i[3] ), .F1(\bytepkt_2_iv_4[3] ));
  SLICEb_85 SLICEb_85( .B1(\EoTp_En[2] ), .A1(\EoTp_En[1] ), 
    .D0(\bytepkt_2_iv_4[2] ), .C0(\bytepkt_2_iv_3[2] ), .B0(N_46), .A0(N_17), 
    .F0(\bytepkt_2[2] ), .F1(N_17));
  SLICEb_86 SLICEb_86( .C1(N_391), .B1(N_42), .A1(\EoTp_En[0] ), 
    .D0(\bytepkt_2_iv_4[1] ), .C0(\bytepkt_2_iv_3[1] ), .B0(N_46), .A0(N_17), 
    .F0(\bytepkt_2[1] ), .F1(N_46));
  SLICEb_87 SLICEb_87( .D1(un21_bytepkt), .C1(un18_bytepkt), .B1(\q_chksum[8] ), 
    .A1(\q_chksum[0] ), .D0(un15_bytepkt), .C0(\bytepkt_2_iv_4[0] ), 
    .B0(\bytepkt_2_iv_3[0] ), .A0(\byte_datab_fifo[0] ), .F0(\bytepkt_2[0] ), 
    .F1(\bytepkt_2_iv_4[0] ));
  SLICEb_88 SLICEb_88( .C1(lpkt_cnt), .B1(chksum_En), .A1(N_42), 
    .D0(un18_bytepkt), .C0(\q_chksum[6] ), .B0(\bytepkt_2_1_iv_3[6] ), 
    .A0(\bytepkt_2_1_iv_1[6] ), .F0(\bytepkt_2[6] ), .F1(un18_bytepkt));
  SLICEb_89 SLICEb_89( .D1(q_chksum_En), .C1(lpkt_cnt), .B1(chksum_En), 
    .A1(N_42), .D0(un21_bytepkt), .C0(\q_chksum[15] ), 
    .B0(\bytepkt_2_0_iv_4[7] ), .A0(\bytepkt_2_0_iv_2[7] ), 
    .F0(\bytepkt_2[7] ), .F1(un21_bytepkt));
  SLICEb_90 SLICEb_90( .C1(hsSync_En_m), .B1(\bytepkt_2_iv_1[5] ), 
    .A1(\bytepkt_2_iv_0[5] ), .D0(un18_bytepkt), .C0(\q_chksum[5] ), 
    .B0(\bytepkt_2_iv_5[5] ), .A0(\bytepkt_2_iv_3[5] ), .F0(\bytepkt_2[5] ), 
    .F1(\bytepkt_2_iv_3[5] ));
  SLICEb_91 SLICEb_91( .C1(hsSync_En_m), .B1(\bytepkt_2_iv_1[4] ), 
    .A1(\bytepkt_2_iv_0[4] ), .D0(un18_bytepkt), .C0(\q_chksum[4] ), 
    .B0(\bytepkt_2_iv_5[4] ), .A0(\bytepkt_2_iv_3[4] ), .F0(\bytepkt_2[4] ), 
    .F1(\bytepkt_2_iv_3[4] ));
  SLICEb_92 SLICEb_92( .D1(\q_wc[15] ), .C1(\q_wc[7] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(\q_vc[1] ), .C0(hsSync_En_m), .B0(\bytepkt_2_0_iv_0[7] ), 
    .A0(N_303), .F0(\bytepkt_2_0_iv_2[7] ), .F1(\bytepkt_2_0_iv_0[7] ));
  SLICEb_93 SLICEb_93( .D1(\q_wc[14] ), .C1(\q_wc[6] ), .B1(WC_1_En), 
    .A1(WC_0_En), .C0(\q_vc[0] ), .B0(\bytepkt_2_1_iv_0[6] ), .A0(N_303), 
    .F0(\bytepkt_2_1_iv_1[6] ), .F1(\bytepkt_2_1_iv_0[6] ));
  SLICEb_94 SLICEb_94( .D1(\q_wc[10] ), .C1(\q_wc[2] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un21_bytepkt), .C0(\q_chksum[10] ), 
    .B0(\bytepkt_2_iv_1[2] ), .A0(\bytepkt_2_iv_0[2] ), 
    .F0(\bytepkt_2_iv_3[2] ), .F1(\bytepkt_2_iv_1[2] ));
  SLICEb_95 SLICEb_95( .D1(\q_wc[11] ), .C1(\q_wc[3] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(\bytepkt_2_iv_1[3] ), .C0(\bytepkt_2_iv_0[3] ), 
    .B0(N_46), .A0(N_17), .F0(\bytepkt_2_iv_3[3] ), .F1(\bytepkt_2_iv_1[3] ));
  SLICEb_96 SLICEb_96( .C1(\EoTp_En[1] ), .B1(\EoTp_En[2] ), .A1(\EoTp_En[3] ), 
    .D0(\bytepkt_2_iv_1[0] ), .C0(\bytepkt_2_iv_0[0] ), .B0(N_46), .A0(N_18), 
    .F0(\bytepkt_2_iv_3[0] ), .F1(N_18));
  SLICEb_97 SLICEb_97( .D1(\q_wc[9] ), .C1(\q_wc[1] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(un21_bytepkt), .C0(\q_chksum[9] ), 
    .B0(\bytepkt_2_iv_1[1] ), .A0(\bytepkt_2_iv_0[1] ), 
    .F0(\bytepkt_2_iv_3[1] ), .F1(\bytepkt_2_iv_1[1] ));
  SLICEb_98 SLICEb_98( .B1(hsSync_En), .A1(\EoTp_En[0] ), 
    .D0(\bytepkt_2_0_a2_0[6] ), .C0(N_391), .B0(N_40), .A0(DataID_En), 
    .F0(N_303), .F1(\bytepkt_2_0_a2_0[6] ));
  SLICEb_99 SLICEb_99( .B1(q_long_en), .A1(long_en_c), .D0(un11_lpkt_cnt_En), 
    .C0(un5_q_long_pkt_indicator), .B0(short_en_c), .A0(q_short_en), 
    .M1(\EoTp_En[2] ), .M0(\EoTp_En[1] ), .CLK(byte_clk_c), 
    .F0(un1_q_long_pkt_indicator_1_i), .Q0(\EoTp_En[2] ), 
    .F1(un5_q_long_pkt_indicator), .Q1(\EoTp_En[3] ));
  SLICEb_100 SLICEb_100( .B1(\q_wc[4] ), .A1(\q_wc[3] ), .D0(un67_q_ECC_4), 
    .C0(un7_q_ECC_0_a2_5), .B0(\q_wc[10] ), .A0(\q_wc[6] ), 
    .F0(un7_q_ECC_0_a2_8), .F1(un67_q_ECC_4));
  SLICEb_101 SLICEb_101( .C1(un6_wc_end_flag_13), .B1(un6_wc_end_flag_4), 
    .A1(un6_wc_end_flag_3), .D0(\un6_wc_end_flag_a_4_i[16] ), 
    .C0(un6_wc_end_flag_NE_8), .B0(un6_wc_end_flag_12), .A0(un6_wc_end_flag_2), 
    .F0(un6_wc_end_flag_NE_12), .F1(un6_wc_end_flag_NE_8));
  u_PH_DLY_FIFO_SLICEb_102 \u_PH_DLY_FIFO/SLICEb_102 ( 
    .C1(\u_PH_DLY_FIFO/wptr_3 ), .B1(\u_PH_DLY_FIFO/wcount_3 ), 
    .A1(\u_PH_DLY_FIFO/r_gcount_w23 ), .C0(\u_PH_DLY_FIFO/wptr_3 ), 
    .B0(\u_PH_DLY_FIFO/wcount_3 ), .A0(\u_PH_DLY_FIFO/r_gcount_w23 ), 
    .M1(\u_PH_DLY_FIFO/rcount_2 ), .M0(\u_PH_DLY_FIFO/rcount_3 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/full_cmp_clr ), .Q0(\u_PH_DLY_FIFO/rptr_3 ), 
    .F1(\u_PH_DLY_FIFO/full_cmp_set ), .Q1(\u_PH_DLY_FIFO/rptr_2 ));
  u_PH_DLY_FIFO_SLICEb_103 \u_PH_DLY_FIFO/SLICEb_103 ( 
    .C1(\u_PH_DLY_FIFO/w_gcount_r21 ), .B1(\u_PH_DLY_FIFO/w_gcount_r22 ), 
    .A1(\u_PH_DLY_FIFO/w_gcount_r23 ), .D0(\u_PH_DLY_FIFO/w_gcount_r20 ), 
    .C0(\u_PH_DLY_FIFO/w_gcount_r21 ), .B0(\u_PH_DLY_FIFO/w_gcount_r22 ), 
    .A0(\u_PH_DLY_FIFO/w_gcount_r23 ), .M1(\u_PH_DLY_FIFO/r_gcount_0 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_1 ), .LSR(un1_q_bytepkt_en_0), 
    .CLK(byte_clk_c), .F0(\u_PH_DLY_FIFO/w_g2b_xor_cluster_0 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w1 ), .F1(\u_PH_DLY_FIFO/wcount_r1 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w0 ));
  u_PH_DLY_FIFO_SLICEb_104 \u_PH_DLY_FIFO/SLICEb_104 ( 
    .C1(\u_PH_DLY_FIFO/r_gcount_w21 ), .B1(\u_PH_DLY_FIFO/r_gcount_w22 ), 
    .A1(\u_PH_DLY_FIFO/r_gcount_w23 ), .D0(\u_PH_DLY_FIFO/r_gcount_w20 ), 
    .C0(\u_PH_DLY_FIFO/r_gcount_w21 ), .B0(\u_PH_DLY_FIFO/r_gcount_w22 ), 
    .A0(\u_PH_DLY_FIFO/r_gcount_w23 ), .M1(\u_PH_DLY_FIFO/r_gcount_2 ), 
    .M0(\u_PH_DLY_FIFO/r_gcount_3 ), .LSR(un1_q_bytepkt_en_0), 
    .CLK(byte_clk_c), .F0(\u_PH_DLY_FIFO/r_g2b_xor_cluster_0 ), 
    .Q0(\u_PH_DLY_FIFO/r_gcount_w3 ), .F1(\u_PH_DLY_FIFO/rcount_w1 ), 
    .Q1(\u_PH_DLY_FIFO/r_gcount_w2 ));
  u_PH_DLY_FIFO_SLICEb_105 \u_PH_DLY_FIFO/SLICEb_105 ( 
    .C1(\u_PH_DLY_FIFO/rptr_3 ), .B1(\u_PH_DLY_FIFO/rcount_3 ), 
    .A1(\u_PH_DLY_FIFO/w_gcount_r23 ), .C0(\u_PH_DLY_FIFO/rptr_3 ), 
    .B0(\u_PH_DLY_FIFO/rcount_3 ), .A0(\u_PH_DLY_FIFO/w_gcount_r23 ), 
    .M1(\u_PH_DLY_FIFO/rcount_0 ), .M0(\u_PH_DLY_FIFO/rcount_1 ), 
    .CE(\u_PH_DLY_FIFO/rden_i ), .LSR(un1_q_bytepkt_en_0), .CLK(byte_clk_c), 
    .F0(\u_PH_DLY_FIFO/empty_cmp_set ), .Q0(\u_PH_DLY_FIFO/rptr_1 ), 
    .F1(\u_PH_DLY_FIFO/empty_cmp_clr ), .Q1(\u_PH_DLY_FIFO/rptr_0 ));
  SLICEb_106 SLICEb_106( .D1(\q_wc[8] ), .C1(\q_wc[5] ), .B1(\q_wc[3] ), 
    .A1(\q_wc[2] ), .D0(\q_wc[8] ), .C0(\q_wc[7] ), .B0(\q_wc[5] ), 
    .A0(\q_wc[2] ), .F0(un7_q_ECC_0_a2_5), .F1(un108_q_ECC_0_a2_5));
  SLICEb_107 SLICEb_107( .D1(un18_bytepkt), .C1(un15_bytepkt), 
    .B1(\q_chksum[1] ), .A1(\byte_datab_fifo[1] ), .D0(un18_bytepkt), 
    .C0(un15_bytepkt), .B0(\q_chksum[7] ), .A0(\byte_datab_fifo[7] ), 
    .F0(\bytepkt_2_0_iv_4[7] ), .F1(\bytepkt_2_iv_4[1] ));
  SLICEb_108 SLICEb_108( .D1(un21_bytepkt), .C1(un15_bytepkt), 
    .B1(\q_chksum[13] ), .A1(\byte_datab_fifo[5] ), .D0(un21_bytepkt), 
    .C0(un15_bytepkt), .B0(\q_chksum[14] ), .A0(\byte_datab_fifo[6] ), 
    .F0(\bytepkt_2_1_iv_3[6] ), .F1(\bytepkt_2_iv_5[5] ));
  SLICEb_109 SLICEb_109( .D1(\q_wc[13] ), .C1(\q_wc[12] ), .B1(\q_wc[7] ), 
    .A1(\q_wc[5] ), .C0(\q_wc[13] ), .B0(\q_wc[12] ), .A0(\q_dt[0] ), 
    .F0(N_21), .F1(un47_q_ECC_0_a2_6));
  SLICEb_110 SLICEb_110( .D1(\q_wc[4] ), .C1(\q_vc[0] ), .B1(\q_dt[3] ), 
    .A1(\q_dt[1] ), .C0(\q_wc[6] ), .B0(\q_dt[3] ), .A0(\q_dt[1] ), 
    .F0(un47_q_ECC_0_a2_4_0), .F1(un87_q_ECC_0_a2_4));
  SLICEb_111 SLICEb_111( .D1(\q_vc[1] ), .C1(\q_dt[5] ), .B1(\q_dt[2] ), 
    .A1(\q_dt[1] ), .D0(\q_wc[15] ), .C0(\q_wc[0] ), .B0(\q_vc[1] ), 
    .A0(\q_dt[2] ), .F0(un47_q_ECC_0_a2_5), .F1(un108_q_ECC_0_a2_4));
  SLICEb_112 SLICEb_112( .D1(\q_wc[0] ), .C1(\q_vc[1] ), .B1(\q_vc[0] ), 
    .A1(\q_dt[5] ), .D0(\q_vc[0] ), .C0(\q_dt[5] ), .B0(\q_dt[3] ), 
    .A0(\q_dt[2] ), .F0(un67_q_ECC_0_a2_4), .F1(un27_q_ECC_0_a2_4));
  SLICEb_113 SLICEb_113( .D1(\q_dt[1] ), .C1(\q_ECC[1] ), .B1(ECC_En), 
    .A1(DataID_En), .D0(\q_dt[4] ), .C0(\q_ECC[4] ), .B0(ECC_En), 
    .A0(DataID_En), .F0(\bytepkt_2_iv_0[4] ), .F1(\bytepkt_2_iv_0[1] ));
  SLICEb_114 SLICEb_114( .D1(\q_wc[8] ), .C1(\q_wc[0] ), .B1(WC_1_En), 
    .A1(WC_0_En), .D0(\q_wc[12] ), .C0(\q_wc[4] ), .B0(WC_1_En), .A0(WC_0_En), 
    .F0(\bytepkt_2_iv_1[4] ), .F1(\bytepkt_2_iv_1[0] ));
  SLICEb_115 SLICEb_115( .D1(\q_dt[0] ), .C1(\q_ECC[0] ), .B1(ECC_En), 
    .A1(DataID_En), .D0(\q_dt[5] ), .C0(\q_ECC[5] ), .B0(ECC_En), 
    .A0(DataID_En), .F0(\bytepkt_2_iv_0[5] ), .F1(\bytepkt_2_iv_0[0] ));
  SLICEb_116 SLICEb_116( .D1(\q_dt[3] ), .C1(\q_ECC[3] ), .B1(ECC_En), 
    .A1(DataID_En), .D0(\q_dt[2] ), .C0(\q_ECC[2] ), .B0(ECC_En), 
    .A0(DataID_En), .F0(\bytepkt_2_iv_0[2] ), .F1(\bytepkt_2_iv_0[3] ));
  SLICEb_117 SLICEb_117( .B1(q_bytepkt_en), .A1(bytepkt_en_c), 
    .B0(\u_PH_DLY_FIFO/FF_1_Q ), .A0(bytepkt_en_c), .M1(chksum_En), 
    .M0(bytepkt_en_c), .CLK(byte_clk_c), .F0(\u_PH_DLY_FIFO/rden_i ), 
    .Q0(q_bytepkt_en), .F1(un1_q_bytepkt_en_0), .Q1(q_chksum_En));
  SLICEb_118 SLICEb_118( .D1(un18_bytepkt), .C1(un15_bytepkt), 
    .B1(\q_chksum[2] ), .A1(\byte_datab_fifo[2] ), .D0(un21_bytepkt), 
    .C0(un15_bytepkt), .B0(\q_chksum[12] ), .A0(\byte_datab_fifo[4] ), 
    .F0(\bytepkt_2_iv_5[4] ), .F1(\bytepkt_2_iv_4[2] ));
  SLICEb_119 SLICEb_119( .D1(\q_wc[9] ), .C1(\q_wc[6] ), .B1(\q_wc[2] ), 
    .A1(\q_wc[0] ), .D0(un6_wc_end_flag_9), .C0(un6_wc_end_flag_1), 
    .B0(\q_wc[0] ), .A0(\lpkt_cnt[0] ), .F0(un6_wc_end_flag_NE_5), 
    .F1(un87_q_ECC_0_a2_5));
  SLICEb_120 SLICEb_120( .D1(\q_wc[14] ), .C1(\q_wc[10] ), .B1(\q_wc[7] ), 
    .A1(\q_wc[1] ), .C0(\q_wc[15] ), .B0(\q_wc[14] ), .A0(\q_dt[4] ), 
    .F0(N_22), .F1(un67_q_ECC_0_a2_5));
  SLICEb_121 SLICEb_121( .B1(\q_wc[11] ), .A1(\q_wc[1] ), .C0(\q_wc[13] ), 
    .B0(\q_wc[11] ), .A0(\q_wc[9] ), .F0(un7_q_ECC_0_a2_4), 
    .F1(un47_q_ECC_0_a2_4));
  SLICEb_122 SLICEb_122( .B1(q_byte_datab_CR31_ram_0_DO3), .A1(G_3), 
    .B0(q_byte_datab_CR31_ram_DO0), .A0(G_3), .F0(\q_byte_datab_and[0] ), 
    .F1(\q_byte_datab_and[7] ));
  SLICEb_123 SLICEb_123( .B1(q_byte_datab_CR31_ram_0_DO2), .A1(G_3), 
    .B0(q_byte_datab_CR31_ram_DO1), .A0(G_3), .F0(\q_byte_datab_and[1] ), 
    .F1(\q_byte_datab_and[6] ));
  SLICEb_124 SLICEb_124( .B1(q_byte_datab_CR31_ram_0_DO1), .A1(G_3), 
    .B0(q_byte_datab_CR31_ram_DO2), .A0(G_3), .F0(\q_byte_datab_and[2] ), 
    .F1(\q_byte_datab_and[5] ));
  SLICEb_125 SLICEb_125( .B1(q_byte_datab_CR31_ram_0_DO0), .A1(G_3), 
    .B0(q_byte_datab_CR31_ram_DO3), .A0(G_3), .F0(\q_byte_datab_and[3] ), 
    .F1(\q_byte_datab_and[4] ));
  SLICEb_126 SLICEb_126( .C1(un6_wc_end_flag_14), .B1(un6_wc_end_flag_6), 
    .A1(un6_wc_end_flag_5), .C0(un6_wc_end_flag_15), .B0(un6_wc_end_flag_8), 
    .A0(un6_wc_end_flag_7), .F0(un6_wc_end_flag_NE_10), 
    .F1(un6_wc_end_flag_NE_9));
  SLICEb_127 SLICEb_127( .D1(\q_wc[13] ), .C1(\q_wc[5] ), .B1(WC_1_En), 
    .A1(WC_0_En), .C0(hsSync_En), .B0(N_40), .A0(DataID_En), .F0(hsSync_En_m), 
    .F1(\bytepkt_2_iv_1[5] ));
  bytepkt_en bytepkt_en_I( .PADDO(bytepkt_en_c), .bytepkt_en(bytepkt_en));
  reset_nb reset_n_I( .PADDI(reset_n_c), .reset_n(reset_n));
  EoTp EoTp_I( .PADDI(EoTp_c), .EoTp(EoTp));
  bytepkt_31_ \bytepkt[31]_I ( .PADDO(gndb), .bytepkt31(bytepkt[31]));
  bytepkt_30_ \bytepkt[30]_I ( .PADDO(gndb), .bytepkt30(bytepkt[30]));
  bytepkt_29_ \bytepkt[29]_I ( .PADDO(gndb), .bytepkt29(bytepkt[29]));
  bytepkt_28_ \bytepkt[28]_I ( .PADDO(gndb), .bytepkt28(bytepkt[28]));
  bytepkt_27_ \bytepkt[27]_I ( .PADDO(gndb), .bytepkt27(bytepkt[27]));
  bytepkt_26_ \bytepkt[26]_I ( .PADDO(gndb), .bytepkt26(bytepkt[26]));
  bytepkt_25_ \bytepkt[25]_I ( .PADDO(gndb), .bytepkt25(bytepkt[25]));
  bytepkt_24_ \bytepkt[24]_I ( .PADDO(gndb), .bytepkt24(bytepkt[24]));
  bytepkt_23_ \bytepkt[23]_I ( .PADDO(gndb), .bytepkt23(bytepkt[23]));
  bytepkt_22_ \bytepkt[22]_I ( .PADDO(gndb), .bytepkt22(bytepkt[22]));
  bytepkt_21_ \bytepkt[21]_I ( .PADDO(gndb), .bytepkt21(bytepkt[21]));
  bytepkt_20_ \bytepkt[20]_I ( .PADDO(gndb), .bytepkt20(bytepkt[20]));
  bytepkt_19_ \bytepkt[19]_I ( .PADDO(gndb), .bytepkt19(bytepkt[19]));
  bytepkt_18_ \bytepkt[18]_I ( .PADDO(gndb), .bytepkt18(bytepkt[18]));
  bytepkt_17_ \bytepkt[17]_I ( .PADDO(gndb), .bytepkt17(bytepkt[17]));
  bytepkt_16_ \bytepkt[16]_I ( .PADDO(gndb), .bytepkt16(bytepkt[16]));
  bytepkt_15_ \bytepkt[15]_I ( .PADDO(gndb), .bytepkt15(bytepkt[15]));
  bytepkt_14_ \bytepkt[14]_I ( .PADDO(gndb), .bytepkt14(bytepkt[14]));
  bytepkt_13_ \bytepkt[13]_I ( .PADDO(gndb), .bytepkt13(bytepkt[13]));
  bytepkt_12_ \bytepkt[12]_I ( .PADDO(gndb), .bytepkt12(bytepkt[12]));
  bytepkt_11_ \bytepkt[11]_I ( .PADDO(gndb), .bytepkt11(bytepkt[11]));
  bytepkt_10_ \bytepkt[10]_I ( .PADDO(gndb), .bytepkt10(bytepkt[10]));
  bytepkt_9_ \bytepkt[9]_I ( .PADDO(gndb), .bytepkt9(bytepkt[9]));
  bytepkt_8_ \bytepkt[8]_I ( .PADDO(gndb), .bytepkt8(bytepkt[8]));
  bytepkt_7_ \bytepkt[7]_I ( .IOLDO(\bytepkt_c[7] ), .bytepkt7(bytepkt[7]));
  bytepkt_7__MGIOL \bytepkt[7]_MGIOL ( .IOLDO(\bytepkt_c[7] ), 
    .OPOS(\bytepkt_2[7] ), .CLK(byte_clk_c));
  bytepkt_6_ \bytepkt[6]_I ( .IOLDO(\bytepkt_c[6] ), .bytepkt6(bytepkt[6]));
  bytepkt_6__MGIOL \bytepkt[6]_MGIOL ( .IOLDO(\bytepkt_c[6] ), 
    .OPOS(\bytepkt_2[6] ), .CLK(byte_clk_c));
  bytepkt_5_ \bytepkt[5]_I ( .IOLDO(\bytepkt_c[5] ), .bytepkt5(bytepkt[5]));
  bytepkt_5__MGIOL \bytepkt[5]_MGIOL ( .IOLDO(\bytepkt_c[5] ), 
    .OPOS(\bytepkt_2[5] ), .CLK(byte_clk_c));
  bytepkt_4_ \bytepkt[4]_I ( .IOLDO(\bytepkt_c[4] ), .bytepkt4(bytepkt[4]));
  bytepkt_4__MGIOL \bytepkt[4]_MGIOL ( .IOLDO(\bytepkt_c[4] ), 
    .OPOS(\bytepkt_2[4] ), .CLK(byte_clk_c));
  bytepkt_3_ \bytepkt[3]_I ( .IOLDO(\bytepkt_c[3] ), .bytepkt3(bytepkt[3]));
  bytepkt_3__MGIOL \bytepkt[3]_MGIOL ( .IOLDO(\bytepkt_c[3] ), 
    .OPOS(\bytepkt_2_iv_i[3] ), .CLK(byte_clk_c));
  bytepkt_2_ \bytepkt[2]_I ( .IOLDO(\bytepkt_c[2] ), .bytepkt2(bytepkt[2]));
  bytepkt_2__MGIOL \bytepkt[2]_MGIOL ( .IOLDO(\bytepkt_c[2] ), 
    .OPOS(\bytepkt_2[2] ), .CLK(byte_clk_c));
  bytepkt_1_ \bytepkt[1]_I ( .IOLDO(\bytepkt_c[1] ), .bytepkt1(bytepkt[1]));
  bytepkt_1__MGIOL \bytepkt[1]_MGIOL ( .IOLDO(\bytepkt_c[1] ), 
    .OPOS(\bytepkt_2[1] ), .CLK(byte_clk_c));
  bytepkt_0_ \bytepkt[0]_I ( .IOLDO(\bytepkt_c[0] ), .bytepkt0(bytepkt[0]));
  bytepkt_0__MGIOL \bytepkt[0]_MGIOL ( .IOLDO(\bytepkt_c[0] ), 
    .OPOS(\bytepkt_2[0] ), .CLK(byte_clk_c));
  chksum_15_ \chksum[15]_I ( .PADDI(\chksum_c[15] ), .chksum15(chksum[15]));
  chksum_15__MGIOL \chksum[15]_MGIOL ( .DI(\chksum_c[15] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[15] ));
  chksum_14_ \chksum[14]_I ( .PADDI(\chksum_c[14] ), .chksum14(chksum[14]));
  chksum_14__MGIOL \chksum[14]_MGIOL ( .DI(\chksum_c[14] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[14] ));
  chksum_13_ \chksum[13]_I ( .PADDI(\chksum_c[13] ), .chksum13(chksum[13]));
  chksum_13__MGIOL \chksum[13]_MGIOL ( .DI(\chksum_c[13] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[13] ));
  chksum_12_ \chksum[12]_I ( .PADDI(\chksum_c[12] ), .chksum12(chksum[12]));
  chksum_12__MGIOL \chksum[12]_MGIOL ( .DI(\chksum_c[12] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[12] ));
  chksum_11_ \chksum[11]_I ( .PADDI(\chksum_c[11] ), .chksum11(chksum[11]));
  chksum_11__MGIOL \chksum[11]_MGIOL ( .DI(\chksum_c[11] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[11] ));
  chksum_10_ \chksum[10]_I ( .PADDI(\chksum_c[10] ), .chksum10(chksum[10]));
  chksum_10__MGIOL \chksum[10]_MGIOL ( .DI(\chksum_c[10] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[10] ));
  chksum_9_ \chksum[9]_I ( .PADDI(\chksum_c[9] ), .chksum9(chksum[9]));
  chksum_9__MGIOL \chksum[9]_MGIOL ( .DI(\chksum_c[9] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[9] ));
  chksum_8_ \chksum[8]_I ( .PADDI(\chksum_c[8] ), .chksum8(chksum[8]));
  chksum_8__MGIOL \chksum[8]_MGIOL ( .DI(\chksum_c[8] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[8] ));
  chksum_7_ \chksum[7]_I ( .PADDI(\chksum_c[7] ), .chksum7(chksum[7]));
  chksum_7__MGIOL \chksum[7]_MGIOL ( .DI(\chksum_c[7] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[7] ));
  chksum_6_ \chksum[6]_I ( .PADDI(\chksum_c[6] ), .chksum6(chksum[6]));
  chksum_6__MGIOL \chksum[6]_MGIOL ( .DI(\chksum_c[6] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[6] ));
  chksum_5_ \chksum[5]_I ( .PADDI(\chksum_c[5] ), .chksum5(chksum[5]));
  chksum_5__MGIOL \chksum[5]_MGIOL ( .DI(\chksum_c[5] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[5] ));
  chksum_4_ \chksum[4]_I ( .PADDI(\chksum_c[4] ), .chksum4(chksum[4]));
  chksum_4__MGIOL \chksum[4]_MGIOL ( .DI(\chksum_c[4] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[4] ));
  chksum_3_ \chksum[3]_I ( .PADDI(\chksum_c[3] ), .chksum3(chksum[3]));
  chksum_3__MGIOL \chksum[3]_MGIOL ( .DI(\chksum_c[3] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[3] ));
  chksum_2_ \chksum[2]_I ( .PADDI(\chksum_c[2] ), .chksum2(chksum[2]));
  chksum_2__MGIOL \chksum[2]_MGIOL ( .DI(\chksum_c[2] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[2] ));
  chksum_1_ \chksum[1]_I ( .PADDI(\chksum_c[1] ), .chksum1(chksum[1]));
  chksum_1__MGIOL \chksum[1]_MGIOL ( .DI(\chksum_c[1] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[1] ));
  chksum_0_ \chksum[0]_I ( .PADDI(\chksum_c[0] ), .chksum0(chksum[0]));
  chksum_0__MGIOL \chksum[0]_MGIOL ( .DI(\chksum_c[0] ), .CE(chksum_rdy_c), 
    .CLK(byte_clk_c), .IN(\q_chksum[0] ));
  chksum_rdy chksum_rdy_I( .PADDI(chksum_rdy_c), .chksum_rdy(chksum_rdy));
  wc_15_ \wc[15]_I ( .PADDI(\wc_c[15] ), .wc15(wc[15]));
  wc_15__MGIOL \wc[15]_MGIOL ( .DI(\wc_c[15] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[15] ));
  wc_14_ \wc[14]_I ( .PADDI(\wc_c[14] ), .wc14(wc[14]));
  wc_14__MGIOL \wc[14]_MGIOL ( .DI(\wc_c[14] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[14] ));
  wc_13_ \wc[13]_I ( .PADDI(\wc_c[13] ), .wc13(wc[13]));
  wc_13__MGIOL \wc[13]_MGIOL ( .DI(\wc_c[13] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[13] ));
  wc_12_ \wc[12]_I ( .PADDI(\wc_c[12] ), .wc12(wc[12]));
  wc_12__MGIOL \wc[12]_MGIOL ( .DI(\wc_c[12] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[12] ));
  wc_11_ \wc[11]_I ( .PADDI(\wc_c[11] ), .wc11(wc[11]));
  wc_11__MGIOL \wc[11]_MGIOL ( .DI(\wc_c[11] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[11] ));
  wc_10_ \wc[10]_I ( .PADDI(\wc_c[10] ), .wc10(wc[10]));
  wc_10__MGIOL \wc[10]_MGIOL ( .DI(\wc_c[10] ), .CE(un3_q_wc_0), 
    .CLK(byte_clk_c), .IN(\q_wc[10] ));
  wc_9_ \wc[9]_I ( .PADDI(\wc_c[9] ), .wc9(wc[9]));
  wc_9__MGIOL \wc[9]_MGIOL ( .DI(\wc_c[9] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[9] ));
  wc_8_ \wc[8]_I ( .PADDI(\wc_c[8] ), .wc8(wc[8]));
  wc_8__MGIOL \wc[8]_MGIOL ( .DI(\wc_c[8] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[8] ));
  wc_7_ \wc[7]_I ( .PADDI(\wc_c[7] ), .wc7(wc[7]));
  wc_7__MGIOL \wc[7]_MGIOL ( .DI(\wc_c[7] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[7] ));
  wc_6_ \wc[6]_I ( .PADDI(\wc_c[6] ), .wc6(wc[6]));
  wc_6__MGIOL \wc[6]_MGIOL ( .DI(\wc_c[6] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[6] ));
  wc_5_ \wc[5]_I ( .PADDI(\wc_c[5] ), .wc5(wc[5]));
  wc_5__MGIOL \wc[5]_MGIOL ( .DI(\wc_c[5] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[5] ));
  wc_4_ \wc[4]_I ( .PADDI(\wc_c[4] ), .wc4(wc[4]));
  wc_4__MGIOL \wc[4]_MGIOL ( .DI(\wc_c[4] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[4] ));
  wc_3_ \wc[3]_I ( .PADDI(\wc_c[3] ), .wc3(wc[3]));
  wc_3__MGIOL \wc[3]_MGIOL ( .DI(\wc_c[3] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[3] ));
  wc_2_ \wc[2]_I ( .PADDI(\wc_c[2] ), .wc2(wc[2]));
  wc_2__MGIOL \wc[2]_MGIOL ( .DI(\wc_c[2] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[2] ));
  wc_1_ \wc[1]_I ( .PADDI(\wc_c[1] ), .wc1(wc[1]));
  wc_1__MGIOL \wc[1]_MGIOL ( .DI(\wc_c[1] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[1] ));
  wc_0_ \wc[0]_I ( .PADDI(\wc_c[0] ), .wc0(wc[0]));
  wc_0__MGIOL \wc[0]_MGIOL ( .DI(\wc_c[0] ), .CE(un3_q_wc_0), .CLK(byte_clk_c), 
    .IN(\q_wc[0] ));
  dt_5_ \dt[5]_I ( .PADDI(\dt_c[5] ), .dt5(dt[5]));
  dt_5__MGIOL \dt[5]_MGIOL ( .DI(\dt_c[5] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[5] ));
  dt_4_ \dt[4]_I ( .PADDI(\dt_c[4] ), .dt4(dt[4]));
  dt_4__MGIOL \dt[4]_MGIOL ( .DI(\dt_c[4] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[4] ));
  dt_3_ \dt[3]_I ( .PADDI(\dt_c[3] ), .dt3(dt[3]));
  dt_3__MGIOL \dt[3]_MGIOL ( .DI(\dt_c[3] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[3] ));
  dt_2_ \dt[2]_I ( .PADDI(\dt_c[2] ), .dt2(dt[2]));
  dt_2__MGIOL \dt[2]_MGIOL ( .DI(\dt_c[2] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[2] ));
  dt_1_ \dt[1]_I ( .PADDI(\dt_c[1] ), .dt1(dt[1]));
  dt_1__MGIOL \dt[1]_MGIOL ( .DI(\dt_c[1] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[1] ));
  dt_0_ \dt[0]_I ( .PADDI(\dt_c[0] ), .dt0(dt[0]));
  dt_0__MGIOL \dt[0]_MGIOL ( .DI(\dt_c[0] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_dt[0] ));
  vc_1_ \vc[1]_I ( .PADDI(\vc_c[1] ), .vc1(vc[1]));
  vc_1__MGIOL \vc[1]_MGIOL ( .DI(\vc_c[1] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_vc[1] ));
  vc_0_ \vc[0]_I ( .PADDI(\vc_c[0] ), .vc0(vc[0]));
  vc_0__MGIOL \vc[0]_MGIOL ( .DI(\vc_c[0] ), 
    .CE(un1_q_long_pkt_indicator_1_1_i), .CLK(byte_clk_c), .IN(\q_vc[0] ));
  byte_datab_7_ \byte_data[7]_I ( .PADDI(\byte_datab_c[7] ), 
    .bytedata7(byte_data[7]));
  byte_datab_6_ \byte_data[6]_I ( .PADDI(\byte_datab_c[6] ), 
    .bytedata6(byte_data[6]));
  byte_datab_5_ \byte_data[5]_I ( .PADDI(\byte_datab_c[5] ), 
    .bytedata5(byte_data[5]));
  byte_datab_4_ \byte_data[4]_I ( .PADDI(\byte_datab_c[4] ), 
    .bytedata4(byte_data[4]));
  byte_datab_3_ \byte_data[3]_I ( .PADDI(\byte_datab_c[3] ), 
    .bytedata3(byte_data[3]));
  byte_datab_2_ \byte_data[2]_I ( .PADDI(\byte_datab_c[2] ), 
    .bytedata2(byte_data[2]));
  byte_datab_1_ \byte_data[1]_I ( .PADDI(\byte_datab_c[1] ), 
    .bytedata1(byte_data[1]));
  byte_datab_0_ \byte_data[0]_I ( .PADDI(\byte_datab_c[0] ), 
    .bytedata0(byte_data[0]));
  byte_clkb byte_clk_I( .PADDI(byte_clk_c), .byte_clk(byte_clk));
  long_en long_en_I( .PADDI(long_en_c), .long_en(long_en));
  long_en_MGIOL long_en_MGIOL( .DI(long_en_c), .CLK(byte_clk_c), 
    .IN(q_long_en));
  short_en short_en_I( .PADDI(short_en_c), .short_en(short_en));
  short_en_MGIOL short_en_MGIOL( .DI(short_en_c), .CLK(byte_clk_c), 
    .IN(q_short_en));
  GSR_INSTb GSR_INSTb( .GSRNET(reset_n_c));
  VHI VHI_INST( .Z(vccbI));
  PUR PUR_INST( .PUR(vccbI));
endmodule

module SLICEb_0 ( input B1, A1, B0, DI1, CLK, output F1, Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly;

  vmuxregsreb \lpkt_cnt[0] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  ccu2 \lpkt_cnt_cry_0[0] ( .A0(gndbI), .B0(B0), .C0(gndbI), .D0(gndbI), .A1(A1), 
    .B1(B1), .C1(gndbI), .D1(gndbI), .CI(gndbI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsreb ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vccb ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gndb ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_PH_DLY_FIFO_SLICEb_1 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1 );
  wire   vccbI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_58 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_59 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/r_gctr_1 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsreb0001 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module alu2_mult ( input A0, A1, CI, output S0, S1, CO1 );

  CU2 INST01( .CI(CI), .PC0(A0), .PC1(A1), .CO(CO1), .NC0(S0), .NC1(S1));
endmodule

module u_PH_DLY_FIFO_SLICEb_2 ( input DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   vccbI, gndbI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_0 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));
  alu2_mult0002 \u_PH_DLY_FIFO/a1 ( .A0(gndbI), .A1(gndbI), .B0(gndbI), .B1(gndbI), 
    .CI(FCI), .S0(F0), .S1(), .CO1());
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module alu2_mult0002 ( input A0, A1, B0, B1, CI, output S0, S1, CO1 );

  FADD2B INST01( .A0(A0), .A1(A1), .B0(B0), .B1(B1), .CI(CI), .COUT(CO1), 
    .S0(S0), .S1(S1));
endmodule

module u_PH_DLY_FIFO_SLICEb_3 ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   vccbI, gndbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_15 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_14 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/empty_cmp_0 ( .A0(A0), .A1(A1), .B0(B0), 
    .B1(B1), .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module alu2_mult0003 ( input A0, A1, B0, B1, CI, output CO1 );

  AGEB2 INST01( .A0(A0), .A1(A1), .B0(B0), .B1(B1), .CI(CI), .GE(CO1));
endmodule

module u_PH_DLY_FIFO_SLICEb_4 ( output FCO );
  wire   gndbI, vccbI;

  alu2_mult0002 \u_PH_DLY_FIFO/w_gctr_cia ( .A0(gndbI), .A1(vccbI), .B0(gndbI), 
    .B1(vccbI), .CI(), .S0(), .S1(), .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_5 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   vccbI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_72 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0004 \u_PH_DLY_FIFO/FF_73 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/w_gctr_0 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsreb0004 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module u_PH_DLY_FIFO_SLICEb_6 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1 );
  wire   vccbI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_70 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_71 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/w_gctr_1 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_7 ( input M1, M0, CLK, output Q0, Q1, FCO );
  wire   vccbI, gndbI, M1_dly, CLK_dly, M0_dly;

  vmuxregsreb q_long_en_2( .D0(M1_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb q_long_en_1( .D0(M0_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  alu2_mult0002 \u_PH_DLY_FIFO/r_gctr_cia ( .A0(gndbI), .A1(vccbI), .B0(gndbI), 
    .B1(vccbI), .CI(), .S0(), .S1(), .CO1(FCO));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_8 ( input A1, A0, DI1, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   vccbI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_60 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0004 \u_PH_DLY_FIFO/FF_61 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult \u_PH_DLY_FIFO/r_gctr_0 ( .A0(A0), .A1(A1), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_9 ( input B1, A1, M1, M0, LSR, CLK, output Q0, Q1, 
    FCO );
  wire   vccbI, gndbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_3 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_2 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0002 \u_PH_DLY_FIFO/empty_cmp_ci_a ( .A0(gndbI), .A1(A1), .B0(gndbI), 
    .B1(B1), .CI(), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_10 ( input DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   vccbI, gndbI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsreb0004 \u_PH_DLY_FIFO/FF_1 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));
  alu2_mult0002 \u_PH_DLY_FIFO/a0 ( .A0(gndbI), .A1(gndbI), .B0(gndbI), .B1(gndbI), 
    .CI(FCI), .S0(F0), .S1(), .CO1());
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_11 ( input B1, A1, M1, M0, LSR, CLK, output Q0, Q1, 
    FCO );
  wire   vccbI, gndbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_9 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_8 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0002 \u_PH_DLY_FIFO/full_cmp_ci_a ( .A0(gndbI), .A1(A1), .B0(gndbI), 
    .B1(B1), .CI(), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_12 ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   vccbI, gndbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_7 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_6 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/full_cmp_1 ( .A0(A0), .A1(A1), .B0(B0), .B1(B1), 
    .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_13 ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   vccbI, gndbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_5 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_4 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/full_cmp_0 ( .A0(A0), .A1(A1), .B0(B0), .B1(B1), 
    .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_14 ( input B1, A1, B0, A0, M1, M0, LSR, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   vccbI, gndbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_17 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_16 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  alu2_mult0003 \u_PH_DLY_FIFO/empty_cmp_1 ( .A0(A0), .A1(A1), .B0(B0), 
    .B1(B1), .CI(FCI), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_15 ( input B0, A0, FCI, output F0, F1 );
  wire   gndbI;

  ccu20005 un6_wc_end_flag_a_4_cry_15_0( .A0(A0), .B0(B0), .C0(gndbI), 
    .D0(gndbI), .A1(gndbI), .B1(gndbI), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h300F;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICEb_16 ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   gndbI;

  ccu20006 un6_wc_end_flag_a_4_cry_13_0( .A0(A0), .B0(B0), .C0(gndbI), 
    .D0(gndbI), .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICEb_17 ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   gndbI;

  ccu20006 un6_wc_end_flag_a_4_cry_11_0( .A0(A0), .B0(B0), .C0(gndbI), 
    .D0(gndbI), .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_18 ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   gndbI;

  ccu20006 un6_wc_end_flag_a_4_cry_9_0( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_19 ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   gndbI;

  ccu20006 un6_wc_end_flag_a_4_cry_7_0( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_20 ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   gndbI;

  ccu20006 un6_wc_end_flag_a_4_cry_5_0( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_21 ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   gndbI;

  ccu20006 un6_wc_end_flag_a_4_cry_3_0( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_22 ( input B1, A1, B0, A0, FCI, output F0, F1, FCO );
  wire   gndbI;

  ccu20006 un6_wc_end_flag_a_4_cry_1_0( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_23 ( input B1, A1, output FCO );
  wire   gndbI;

  ccu20007 un6_wc_end_flag_a_4_cry_0_0( .A0(gndbI), .B0(gndbI), .C0(gndbI), 
    .D0(gndbI), .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(gndbI), .S0(), .S1(), 
    .CO1(FCO));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICEb_24 ( input B0, A0, DI0, CLK, FCI, output F0, Q0 );
  wire   vccbI, gndbI, DI0_dly, CLK_dly;

  vmuxregsreb \lpkt_cnt[15] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  ccu20008 \lpkt_cnt_s_0[15] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(gndbI), .B1(gndbI), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5008;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICEb_25 ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[14] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \lpkt_cnt[13] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[13] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICEb_26 ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[12] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \lpkt_cnt[11] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[11] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_27 ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[10] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \lpkt_cnt[9] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[9] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_28 ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[8] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \lpkt_cnt[7] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[7] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_29 ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[6] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \lpkt_cnt[5] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[5] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_30 ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[4] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \lpkt_cnt[3] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_31 ( input B1, A1, B0, A0, DI1, DI0, CLK, FCI, output F0, Q0, F1, 
    Q1, FCO );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsreb \lpkt_cnt[2] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \lpkt_cnt[1] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  ccu20009 \lpkt_cnt_cry_0[1] ( .A0(A0), .B0(B0), .C0(gndbI), .D0(gndbI), 
    .A1(A1), .B1(B1), .C1(gndbI), .D1(gndbI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module q_byte_datab_CR31_ram_SLICEb_32 ( input D1, C1, B1, A1, B0, A0, output 
    WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   gndbI;

  buffer \q_byte_datab_CR31_ram/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \q_byte_datab_CR31_ram/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \q_byte_datab_CR31_ram/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \q_byte_datab_CR31_ram/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \q_byte_datab_CR31_ram/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \q_byte_datab_CR31_ram/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \q_byte_datab_CR31_ram/WAD2_INT ( .I(gndbI), .Z(WADO2));
  gndb DRIVEgndb( .PWR0(gndbI));
  buffer \q_byte_datab_CR31_ram/WAD3_INT ( .I(gndbI), .Z(WADO3));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module buffer ( input I, output Z );

  BUFBA INST1( .A(I), .Z(Z));
endmodule

module q_byte_datab_CR31_ram_SLICEb_33 ( input B1, A1, B0, A0, WCK, output F0, 
    F1, input WAD0, WAD1, WAD2, WAD3, WD0, WD1 );
  wire   gndbI, vccbI, WAD0_dly, WCK_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, 
         WD1_dly;

  ec2dpram \q_byte_datab_CR31_ram/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), .RA0(A0), 
    .RA1(B1), .RA2(gndbI), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(vccbI), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
  endspecify

endmodule

module ec2dpram ( input DI0, DI1, RA0, RA1, RA2, RA3, WA0, WA1, WA2, WA3, WRE, 
    WCK, output DO0, DO1 );
  wire   TIELO;

  VLO gndb1( .Z(TIELO));
  DPR16X4C #("0x0000000000000000") inst0( .DI0(DI0), .DI1(DI1), .DI2(TIELO), 
    .DI3(TIELO), .WAD0(WA0), .WAD1(WA1), .WAD2(WA2), .WAD3(WA3), .WRE(WRE), 
    .WCK(WCK), .RAD0(RA0), .RAD1(RA1), .RAD2(RA2), .RAD3(RA3), .DO0(DO0), 
    .DO1(DO1), .DO2(), .DO3());
endmodule

module q_byte_datab_CR31_ram_SLICEb_34 ( input B1, A1, B0, A0, WCK, output F0, 
    F1, input WAD0, WAD1, WAD2, WAD3, WD0, WD1 );
  wire   gndbI, vccbI, WAD0_dly, WCK_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, 
         WD1_dly;

  ec2dpram0010 \q_byte_datab_CR31_ram/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(gndbI), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(vccbI), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
  endspecify

endmodule

module ec2dpram0010 ( input DI0, DI1, RA0, RA1, RA2, RA3, WA0, WA1, WA2, WA3, 
    WRE, WCK, output DO0, DO1 );
  wire   TIELO;

  VLO gndb1( .Z(TIELO));
  DPR16X4C #("0x0000000000000000") inst0( .DI0(TIELO), .DI1(TIELO), .DI2(DI0), 
    .DI3(DI1), .WAD0(WA0), .WAD1(WA1), .WAD2(WA2), .WAD3(WA3), .WRE(WRE), 
    .WCK(WCK), .RAD0(RA0), .RAD1(RA1), .RAD2(RA2), .RAD3(RA3), .DO0(), .DO1(), 
    .DO2(DO0), .DO3(DO1));
endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_6_1 ( input D1, C1, B1, A1, C0, B0, A0, 
    output WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   gndbI;

  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD2_INT ( .I(C0), .Z(WADO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_6/WAD3_INT ( .I(gndbI), .Z(WADO3));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (C0 => WADO2) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_6_0 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram \u_PH_DLY_FIFO/fifo_pfu_0_6/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_44 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_45 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_6 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram0010 \u_PH_DLY_FIFO/fifo_pfu_0_6/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_42 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_43 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_7_3 ( input D1, C1, B1, A1, C0, B0, A0, 
    output WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   gndbI;

  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD2_INT ( .I(C0), .Z(WADO2));
  buffer \u_PH_DLY_FIFO/fifo_pfu_0_7/WAD3_INT ( .I(gndbI), .Z(WADO3));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (C0 => WADO2) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_7 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram \u_PH_DLY_FIFO/fifo_pfu_0_7/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_48 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_49 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_fifo_pfu_0_7_2 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    WRE, WCK, CE, LSR, CLK, output F0, Q0, F1, Q1, input WAD0, WAD1, WAD2, 
    WAD3, WD0, WD1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly, WRE_dly, WCK_dly, CE_dly, 
         LSR_dly, WAD0_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, WD1_dly;

  ec2dpram0010 \u_PH_DLY_FIFO/fifo_pfu_0_7/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(C0), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(WRE_dly), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_46 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_47 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge WCK, WRE, 0:0:0, 0:0:0,,,, WCK_dly, WRE_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module q_byte_datab_CR31_ram_0_SLICEb_41 ( input D1, C1, B1, A1, B0, A0, output 
    WADO0, WADO1, WADO2, WADO3, WDO0, WDO1, WDO2, WDO3 );
  wire   gndbI;

  buffer \q_byte_datab_CR31_ram_0/WD0_INT ( .I(A1), .Z(WDO0));
  buffer \q_byte_datab_CR31_ram_0/WD1_INT ( .I(B1), .Z(WDO1));
  buffer \q_byte_datab_CR31_ram_0/WD2_INT ( .I(C1), .Z(WDO2));
  buffer \q_byte_datab_CR31_ram_0/WD3_INT ( .I(D1), .Z(WDO3));
  buffer \q_byte_datab_CR31_ram_0/WAD0_INT ( .I(A0), .Z(WADO0));
  buffer \q_byte_datab_CR31_ram_0/WAD1_INT ( .I(B0), .Z(WADO1));
  buffer \q_byte_datab_CR31_ram_0/WAD2_INT ( .I(gndbI), .Z(WADO2));
  gndb DRIVEgndb( .PWR0(gndbI));
  buffer \q_byte_datab_CR31_ram_0/WAD3_INT ( .I(gndbI), .Z(WADO3));

  specify
    (D1 => WDO3) = (0:0:0,0:0:0);
    (C1 => WDO2) = (0:0:0,0:0:0);
    (B1 => WDO1) = (0:0:0,0:0:0);
    (A1 => WDO0) = (0:0:0,0:0:0);
    (B0 => WADO1) = (0:0:0,0:0:0);
    (A0 => WADO0) = (0:0:0,0:0:0);
  endspecify

endmodule

module q_byte_datab_CR31_ram_0_SLICEb_42 ( input B1, A1, B0, A0, WCK, output F0, 
    F1, input WAD0, WAD1, WAD2, WAD3, WD0, WD1 );
  wire   gndbI, vccbI, WAD0_dly, WCK_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, 
         WD1_dly;

  ec2dpram \q_byte_datab_CR31_ram_0/RAM0 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(gndbI), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(vccbI), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
  endspecify

endmodule

module q_byte_datab_CR31_ram_0_SLICEb_43 ( input B1, A1, B0, A0, WCK, output F0, 
    F1, input WAD0, WAD1, WAD2, WAD3, WD0, WD1 );
  wire   gndbI, vccbI, WAD0_dly, WCK_dly, WAD1_dly, WAD2_dly, WAD3_dly, WD0_dly, 
         WD1_dly;

  ec2dpram0010 \q_byte_datab_CR31_ram_0/RAM1 ( .DI0(WD0_dly), .DI1(WD1_dly), 
    .RA0(A0), .RA1(B1), .RA2(gndbI), .RA3(gndbI), .WA0(WAD0_dly), .WA1(WAD1_dly), 
    .WA2(WAD2_dly), .WA3(WAD3_dly), .WRE(vccbI), .WCK(WCK_dly), .DO0(F0), 
    .DO1(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (WCK => F0) = (0:0:0,0:0:0);
    (WCK => F1) = (0:0:0,0:0:0);
    $setuphold (posedge WCK, WAD0, 0:0:0, 0:0:0,,,, WCK_dly, WAD0_dly);
    $setuphold (posedge WCK, WAD1, 0:0:0, 0:0:0,,,, WCK_dly, WAD1_dly);
    $setuphold (posedge WCK, WAD2, 0:0:0, 0:0:0,,,, WCK_dly, WAD2_dly);
    $setuphold (posedge WCK, WAD3, 0:0:0, 0:0:0,,,, WCK_dly, WAD3_dly);
    $setuphold (posedge WCK, WD0, 0:0:0, 0:0:0,,,, WCK_dly, WD0_dly);
    $setuphold (posedge WCK, WD1, 0:0:0, 0:0:0,,,, WCK_dly, WD1_dly);
    $width (posedge WCK, 0:0:0);
    $width (negedge WCK, 0:0:0);
  endspecify

endmodule

module SLICEb_44 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   vccbI, gndbI, DI0_dly, CLK_dly;

  lut4b DataID_En_2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb DataID_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_45 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   vccbI, gndbI, DI0_dly, CLK_dly;

  lut4b0011 ECC_En_2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb ECC_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0011 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_46 ( input C1, B1, A1, D0, C0, B0, A0, DI0, M1, CLK, output F0, 
    Q0, F1, Q1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly, M1_dly;

  lut4b0012 \bytepkt_2_0_a3_0[6] ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0013 \EoTp_En_RNO[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \EoTp_En[1] ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb \EoTp_En[0] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0012 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0013 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_48 ( input DI0, M1, CLK, output F0, Q0, Q1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly, M1_dly;

  lut4b0014 \vccb\000/BUF1/BUF1 ( .A(gndbI), .B(gndbI), .C(gndbI), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb G_2( .D0(M1_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb G_1( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0014 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_50 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly, CE_dly;

  lut4b0015 un3_q_wc( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0016 long_en_pad_RNIUEQP( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb PH_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBABA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2F22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_51 ( input B1, A1, B0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly;

  lut4b0017 \PH_cnt_RNO[1] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0018 \un7_PH_cnt[0] ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  vmuxregsreb \PH_cnt[1] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb \PH_cnt[0] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_52 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly;

  lut4b0019 \un7_PH_cnt[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0020 \PH_cnt_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \PH_cnt[3] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb \PH_cnt[2] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4C80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6A6A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_53 ( input D0, C0, B0, A0, DI0, M1, CLK, output F0, Q0, Q1 );
  wire   vccbI, gndbI, DI0_dly, CLK_dly, M1_dly;

  lut4b0021 WC_0_En_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb G_3( .D0(M1_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb WC_0_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_54 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly;

  lut4b0022 \un7_PH_cnt_RNO[3] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0023 WC_1_En_2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb WC_1_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_55 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly;

  lut4b0024 un15_bytepkt_0_a3( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0025 bytepkt_en_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb bytepkt_en( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFBF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_56 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly;

  lut4b0026 un6_wc_end_flag_a_4_cry_9_0_RNIU88K1( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut4b0012 chksum_En_RNO( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb chksum_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_57 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   vccbI, gndbI, DI0_dly, CLK_dly;

  lut4b0027 un11_lpkt_cnt_En( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0028 hsSync_En_2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb hsSync_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_58 ( input D1, C1, B1, A1, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly, CE_dly;

  lut4b0029 lpkt_cnt_En_RNO( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0022 un2_lpkt_cnt_En( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb lpkt_cnt_En( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_59 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut4b0030 un87_q_ECC_0_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0030 un108_q_ECC_0_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \q_ECC[1] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \q_ECC[0] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6996) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_60 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut4b0030 un47_q_ECC_0_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0030 un67_q_ECC_0_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \q_ECC[3] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \q_ECC[2] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_61 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   vccbI, gndbI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut4b0030 un7_q_ECC_0_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0030 un27_q_ECC_0_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \q_ECC[5] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb \q_ECC[4] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_65 ( input B1, A1, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly, CE_dly;

  lut4b0031 un5_q_ECC( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0032 q_long_pkt_indicator_RNO( .A(A0), .B(B0), .C(gndbI), .D(gndbI), 
    .Z(F0));
  vmuxregsreb q_long_pkt_indicator( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(gndbI), .Q(Q0));
  vccb DRIVEvccb( .PWR1(vccbI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_66 ( input B1, A1, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly;

  lut4b0017 \q_byte_datab_CF1_RNITG2N[1] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), 
    .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0033 \q_byte_datab_CF1_RNIU7HB[0] ( .A(A0), .B(gndbI), .C(gndbI), .D(gndbI), 
    .Z(F0));
  vmuxregsreb0001 \q_byte_datab_CF1[1] ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \q_byte_datab_CF1[0] ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICEb_67 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut4b0017 \u_PH_DLY_FIFO/XOR2_t1 ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0017 \u_PH_DLY_FIFO/XOR2_t2 ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_56 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_57 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_68 ( input B1, A1, B0, A0, DI0, M1, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut4b0017 \u_PH_DLY_FIFO/lut4b_8 ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0017 \u_PH_DLY_FIFO/XOR2_t0 ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_54 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_55 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_75 ( input B1, A1, B0, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut4b0017 \u_PH_DLY_FIFO/XOR2_t4 ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0017 \u_PH_DLY_FIFO/XOR2_t5 ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_68 ( .D0(vccbI), .D1(DI1_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_69 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_76 ( input B1, A1, B0, A0, DI0, M1, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut4b0017 \u_PH_DLY_FIFO/lut4b_5 ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0017 \u_PH_DLY_FIFO/XOR2_t3 ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_66 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_67 ( .D0(vccbI), .D1(DI0_dly), .SD(vccbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_81 ( input M1, M0, CE, LSR, CLK, output F0, Q0, Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut4b0034 gndb( .A(gndbI), .B(gndbI), .C(gndbI), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_64 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_65 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_82 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut4b0030 un27_q_ECC_0_a2_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0018 \u_PH_DLY_FIFO/AND2_t8 ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_62 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_63 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_83 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0012 \bytepkt_2_0_a3[6] ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0011 un15_bytepkt_0_a2( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_84 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0035 \bytepkt_2_iv_4[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0036 \bytepkt_2_iv_i[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7350) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0203) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_85 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0031 \bytepkt_cnst_7__bytepkt_cnst_5_0_.m2_0_o2 ( .A(A1), .B(B1), 
    .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0037 \bytepkt_2_iv[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_86 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0038 \bytepkt_cnst_7__bytepkt_cnst_5_0_.m2_0_a3 ( .A(A1), .B(B1), .C(C1), 
    .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0037 \bytepkt_2_iv[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_87 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_iv_4[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0040 \bytepkt_2_iv[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_88 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0041 un18_bytepkt_0_a2( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0042 \bytepkt_2_1_iv[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_89 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0043 un21_bytepkt_0_a2( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0042 \bytepkt_2_0_iv[7] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_90 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0044 \bytepkt_2_iv_3[5] ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0042 \bytepkt_2_iv[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_91 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0044 \bytepkt_2_iv_3[4] ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0042 \bytepkt_2_iv[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_92 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_0_iv_0[7] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0040 \bytepkt_2_0_iv_2[7] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_93 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0039 \bytepkt_2_1_iv_0[6] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0045 \bytepkt_2_1_iv_1[6] ( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_94 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_iv_1[2] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0042 \bytepkt_2_iv_3[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_95 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0046 \bytepkt_2_iv_1[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0047 \bytepkt_2_iv_3[3] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_96 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0044 \bytepkt_cnst_7__bytepkt_cnst_5_0_.m4_i_o2 ( .A(A1), .B(B1), .C(C1), 
    .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0037 \bytepkt_2_iv_3[0] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_97 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_iv_1[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0042 \bytepkt_2_iv_3[1] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_98 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0018 \bytepkt_2_0_a2_0[6] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0048 \bytepkt_2_0[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_99 ( input B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, F1, 
    Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly;

  lut4b0018 un5_q_long_pkt_indicator( .A(A1), .B(B1), .C(gndbI), .D(gndbI), 
    .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0047 PH_En_RNO( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb \EoTp_En[3] ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb \EoTp_En[2] ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICEb_100 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0017 un67_q_ECC_0_a2_4( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0030 un7_q_ECC_0_a2_8( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_101 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0044 un6_wc_end_flag_a_4_cry_3_0_RNINN58( .A(A1), .B(B1), .C(C1), 
    .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0026 un6_wc_end_flag_a_4_cry_1_0_RNITVMK( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_102 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut4b0049 \u_PH_DLY_FIFO/lut4b_1 ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0050 \u_PH_DLY_FIFO/lut4b_0 ( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_51 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_50 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1818) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8181) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICEb_103 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut4b0051 \u_PH_DLY_FIFO/lut4b_7 ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0030 \u_PH_DLY_FIFO/lut4b_9 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_13 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_12 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9696) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_PH_DLY_FIFO_SLICEb_104 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut4b0051 \u_PH_DLY_FIFO/lut4b_4 ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0030 \u_PH_DLY_FIFO/lut4b_6 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_11 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_10 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(vccbI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_PH_DLY_FIFO_SLICEb_105 ( input C1, B1, A1, C0, B0, A0, M1, M0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut4b0052 \u_PH_DLY_FIFO/lut4b_2 ( .A(A1), .B(B1), .C(C1), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0053 \u_PH_DLY_FIFO/lut4b_3 ( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_53 ( .D0(M1_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb0001 \u_PH_DLY_FIFO/FF_52 ( .D0(M0_dly), .D1(vccbI), .SD(gndbI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4242) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut4b0053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2424) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_106 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0030 un108_q_ECC_0_a2_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0030 un7_q_ECC_0_a2_5( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_107 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_iv_4[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0039 \bytepkt_2_0_iv_4[7] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_108 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_iv_5[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0039 \bytepkt_2_1_iv_3[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_109 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0030 un47_q_ECC_0_a2_6( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0051 un67_q_ECC_0_a2_0( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_110 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0030 un87_q_ECC_0_a2_4( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0051 un47_q_ECC_0_a2_4( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_111 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0030 un108_q_ECC_0_a2_4( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0030 un47_q_ECC_0_a2_5( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_112 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0030 un27_q_ECC_0_a2_4( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0030 un67_q_ECC_0_a2_4_0( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_113 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0054 \bytepkt_2_iv_0[1] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0054 \bytepkt_2_iv_0[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_114 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_iv_1[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0039 \bytepkt_2_iv_1[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_115 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0054 \bytepkt_2_iv_0[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0054 \bytepkt_2_iv_0[5] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_116 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0055 \bytepkt_2_iv_0[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0054 \bytepkt_2_iv_0[2] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_117 ( input B1, A1, B0, A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   gndbI, vccbI, M1_dly, CLK_dly, M0_dly;

  lut4b0056 un1_q_bytepkt_en( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0018 \u_PH_DLY_FIFO/AND2_t7 ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));
  vmuxregsreb q_chksum_En( .D0(M1_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q1));
  vccb DRIVEvccb( .PWR1(vccbI));
  vmuxregsreb q_bytepkt_en( .D0(M0_dly), .D1(vccbI), .SD(gndbI), .SP(vccbI), 
    .CK(CLK_dly), .LSR(gndbI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4b0056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_118 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0039 \bytepkt_2_iv_4[2] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0039 \bytepkt_2_iv_5[4] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_119 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut4b0030 un87_q_ECC_0_a2_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0057 un6_wc_end_flag_a_4_cry_1_0_RNI8AFO( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4b0057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICEb_120 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0030 un67_q_ECC_0_a2_5( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0051 un27_q_ECC_0_a2_0( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_121 ( input B1, A1, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0017 un27_q_ECC_0_a2_3( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0051 un7_q_ECC_0_a2_4( .A(A0), .B(B0), .C(C0), .D(gndbI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_122 ( input B1, A1, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0022 \q_byte_datab_and[7] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0022 \q_byte_datab_and[0] ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_123 ( input B1, A1, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0022 \q_byte_datab_and[6] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0022 \q_byte_datab_and[1] ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_124 ( input B1, A1, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0022 \q_byte_datab_and[5] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0022 \q_byte_datab_and[2] ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_125 ( input B1, A1, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0022 \q_byte_datab_and[4] ( .A(A1), .B(B1), .C(gndbI), .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0022 \q_byte_datab_and[3] ( .A(A0), .B(B0), .C(gndbI), .D(gndbI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_126 ( input C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0044 un6_wc_end_flag_a_4_cry_5_0_RNIRV98( .A(A1), .B(B1), .C(C1), 
    .D(gndbI), .Z(F1));
  gndb DRIVEgndb( .PWR0(gndbI));
  lut4b0044 un6_wc_end_flag_a_4_cry_7_0_RNI1CG8( .A(A0), .B(B0), .C(C0), 
    .D(gndbI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICEb_127 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   gndbI;

  lut4b0039 \bytepkt_2_iv_1[5] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4b0038 \bytepkt_2_0_a3_RNI79GH[6] ( .A(A0), .B(B0), .C(C0), .D(gndbI), 
    .Z(F0));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_en ( input PADDO, output bytepkt_en );
  wire   gndbI;

  xo2iobufb bytepkt_en_pad( .I(PADDO), .T(gndbI), .PAD(bytepkt_en));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt_en) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobufb ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module reset_nb ( output PADDI, input reset_n );

  xo2iobufb0058 reset_n_pad( .Z(PADDI), .PAD(reset_n));

  specify
    (reset_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge reset_n, 0:0:0);
    $width (negedge reset_n, 0:0:0);
  endspecify

endmodule

module xo2iobufb0058 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module EoTp ( output PADDI, input EoTp );

  xo2iobufb0059 EoTp_pad( .Z(PADDI), .PAD(EoTp));

  specify
    (EoTp => PADDI) = (0:0:0,0:0:0);
    $width (posedge EoTp, 0:0:0);
    $width (negedge EoTp, 0:0:0);
  endspecify

endmodule

module xo2iobufb0059 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module bytepkt_31_ ( input PADDO, output bytepkt31 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[31] ( .I(PADDO), .T(gndbI), .PAD(bytepkt31));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt31) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_30_ ( input PADDO, output bytepkt30 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[30] ( .I(PADDO), .T(gndbI), .PAD(bytepkt30));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt30) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_29_ ( input PADDO, output bytepkt29 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[29] ( .I(PADDO), .T(gndbI), .PAD(bytepkt29));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt29) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_28_ ( input PADDO, output bytepkt28 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[28] ( .I(PADDO), .T(gndbI), .PAD(bytepkt28));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt28) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_27_ ( input PADDO, output bytepkt27 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[27] ( .I(PADDO), .T(gndbI), .PAD(bytepkt27));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt27) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_26_ ( input PADDO, output bytepkt26 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[26] ( .I(PADDO), .T(gndbI), .PAD(bytepkt26));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt26) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_25_ ( input PADDO, output bytepkt25 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[25] ( .I(PADDO), .T(gndbI), .PAD(bytepkt25));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt25) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_24_ ( input PADDO, output bytepkt24 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[24] ( .I(PADDO), .T(gndbI), .PAD(bytepkt24));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt24) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_23_ ( input PADDO, output bytepkt23 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[23] ( .I(PADDO), .T(gndbI), .PAD(bytepkt23));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt23) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_22_ ( input PADDO, output bytepkt22 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[22] ( .I(PADDO), .T(gndbI), .PAD(bytepkt22));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt22) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_21_ ( input PADDO, output bytepkt21 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[21] ( .I(PADDO), .T(gndbI), .PAD(bytepkt21));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt21) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_20_ ( input PADDO, output bytepkt20 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[20] ( .I(PADDO), .T(gndbI), .PAD(bytepkt20));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt20) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_19_ ( input PADDO, output bytepkt19 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[19] ( .I(PADDO), .T(gndbI), .PAD(bytepkt19));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt19) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_18_ ( input PADDO, output bytepkt18 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[18] ( .I(PADDO), .T(gndbI), .PAD(bytepkt18));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt18) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_17_ ( input PADDO, output bytepkt17 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[17] ( .I(PADDO), .T(gndbI), .PAD(bytepkt17));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt17) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_16_ ( input PADDO, output bytepkt16 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[16] ( .I(PADDO), .T(gndbI), .PAD(bytepkt16));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt16) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_15_ ( input PADDO, output bytepkt15 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[15] ( .I(PADDO), .T(gndbI), .PAD(bytepkt15));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt15) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_14_ ( input PADDO, output bytepkt14 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[14] ( .I(PADDO), .T(gndbI), .PAD(bytepkt14));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt14) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_13_ ( input PADDO, output bytepkt13 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[13] ( .I(PADDO), .T(gndbI), .PAD(bytepkt13));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt13) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_12_ ( input PADDO, output bytepkt12 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[12] ( .I(PADDO), .T(gndbI), .PAD(bytepkt12));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt12) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_11_ ( input PADDO, output bytepkt11 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[11] ( .I(PADDO), .T(gndbI), .PAD(bytepkt11));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt11) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_10_ ( input PADDO, output bytepkt10 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[10] ( .I(PADDO), .T(gndbI), .PAD(bytepkt10));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt10) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_9_ ( input PADDO, output bytepkt9 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[9] ( .I(PADDO), .T(gndbI), .PAD(bytepkt9));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt9) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_8_ ( input PADDO, output bytepkt8 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[8] ( .I(PADDO), .T(gndbI), .PAD(bytepkt8));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (PADDO => bytepkt8) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_7_ ( input IOLDO, output bytepkt7 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[7] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt7));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt7) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_7__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[7] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsreb ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module bytepkt_6_ ( input IOLDO, output bytepkt6 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[6] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt6));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt6) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_6__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[6] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_5_ ( input IOLDO, output bytepkt5 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[5] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt5));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt5) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_5__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[5] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_4_ ( input IOLDO, output bytepkt4 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[4] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt4));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt4) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_4__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[4] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_3_ ( input IOLDO, output bytepkt3 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[3] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt3));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt3) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_3__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[3] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_2_ ( input IOLDO, output bytepkt2 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[2] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt2));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt2) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_2__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[2] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_1_ ( input IOLDO, output bytepkt1 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[1] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt1));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt1) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_1__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[1] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bytepkt_0_ ( input IOLDO, output bytepkt0 );
  wire   gndbI;

  xo2iobufb \bytepkt_pad[0] ( .I(IOLDO), .T(gndbI), .PAD(bytepkt0));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (IOLDO => bytepkt0) = (0:0:0,0:0:0);
  endspecify

endmodule

module bytepkt_0__MGIOL ( output IOLDO, input OPOS, CLK );
  wire   vccbI, gndbI, OPOS_dly, CLK_dly;

  mfflsreb \bytepkt_1_0io[0] ( .D0(OPOS_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IOLDO));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_15_ ( output PADDI, input chksum15 );

  xo2iobufb0059 \chksum_pad[15] ( .Z(PADDI), .PAD(chksum15));

  specify
    (chksum15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum15, 0:0:0);
    $width (negedge chksum15, 0:0:0);
  endspecify

endmodule

module chksum_15__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsreb ( input D0, SP, CK, LSR, output Q );

  IFS1P3BX INST01( .D(D0), .SP(SP), .SCLK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module chksum_14_ ( output PADDI, input chksum14 );

  xo2iobufb0059 \chksum_pad[14] ( .Z(PADDI), .PAD(chksum14));

  specify
    (chksum14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum14, 0:0:0);
    $width (negedge chksum14, 0:0:0);
  endspecify

endmodule

module chksum_14__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_13_ ( output PADDI, input chksum13 );

  xo2iobufb0059 \chksum_pad[13] ( .Z(PADDI), .PAD(chksum13));

  specify
    (chksum13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum13, 0:0:0);
    $width (negedge chksum13, 0:0:0);
  endspecify

endmodule

module chksum_13__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_12_ ( output PADDI, input chksum12 );

  xo2iobufb0059 \chksum_pad[12] ( .Z(PADDI), .PAD(chksum12));

  specify
    (chksum12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum12, 0:0:0);
    $width (negedge chksum12, 0:0:0);
  endspecify

endmodule

module chksum_12__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_11_ ( output PADDI, input chksum11 );

  xo2iobufb0059 \chksum_pad[11] ( .Z(PADDI), .PAD(chksum11));

  specify
    (chksum11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum11, 0:0:0);
    $width (negedge chksum11, 0:0:0);
  endspecify

endmodule

module chksum_11__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_10_ ( output PADDI, input chksum10 );

  xo2iobufb0059 \chksum_pad[10] ( .Z(PADDI), .PAD(chksum10));

  specify
    (chksum10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum10, 0:0:0);
    $width (negedge chksum10, 0:0:0);
  endspecify

endmodule

module chksum_10__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_9_ ( output PADDI, input chksum9 );

  xo2iobufb0059 \chksum_pad[9] ( .Z(PADDI), .PAD(chksum9));

  specify
    (chksum9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum9, 0:0:0);
    $width (negedge chksum9, 0:0:0);
  endspecify

endmodule

module chksum_9__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_8_ ( output PADDI, input chksum8 );

  xo2iobufb0059 \chksum_pad[8] ( .Z(PADDI), .PAD(chksum8));

  specify
    (chksum8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum8, 0:0:0);
    $width (negedge chksum8, 0:0:0);
  endspecify

endmodule

module chksum_8__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_7_ ( output PADDI, input chksum7 );

  xo2iobufb0059 \chksum_pad[7] ( .Z(PADDI), .PAD(chksum7));

  specify
    (chksum7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum7, 0:0:0);
    $width (negedge chksum7, 0:0:0);
  endspecify

endmodule

module chksum_7__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_6_ ( output PADDI, input chksum6 );

  xo2iobufb0059 \chksum_pad[6] ( .Z(PADDI), .PAD(chksum6));

  specify
    (chksum6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum6, 0:0:0);
    $width (negedge chksum6, 0:0:0);
  endspecify

endmodule

module chksum_6__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_5_ ( output PADDI, input chksum5 );

  xo2iobufb0059 \chksum_pad[5] ( .Z(PADDI), .PAD(chksum5));

  specify
    (chksum5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum5, 0:0:0);
    $width (negedge chksum5, 0:0:0);
  endspecify

endmodule

module chksum_5__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_4_ ( output PADDI, input chksum4 );

  xo2iobufb0059 \chksum_pad[4] ( .Z(PADDI), .PAD(chksum4));

  specify
    (chksum4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum4, 0:0:0);
    $width (negedge chksum4, 0:0:0);
  endspecify

endmodule

module chksum_4__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_3_ ( output PADDI, input chksum3 );

  xo2iobufb0059 \chksum_pad[3] ( .Z(PADDI), .PAD(chksum3));

  specify
    (chksum3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum3, 0:0:0);
    $width (negedge chksum3, 0:0:0);
  endspecify

endmodule

module chksum_3__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_2_ ( output PADDI, input chksum2 );

  xo2iobufb0059 \chksum_pad[2] ( .Z(PADDI), .PAD(chksum2));

  specify
    (chksum2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum2, 0:0:0);
    $width (negedge chksum2, 0:0:0);
  endspecify

endmodule

module chksum_2__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_1_ ( output PADDI, input chksum1 );

  xo2iobufb0059 \chksum_pad[1] ( .Z(PADDI), .PAD(chksum1));

  specify
    (chksum1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum1, 0:0:0);
    $width (negedge chksum1, 0:0:0);
  endspecify

endmodule

module chksum_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_0_ ( output PADDI, input chksum0 );

  xo2iobufb0059 \chksum_pad[0] ( .Z(PADDI), .PAD(chksum0));

  specify
    (chksum0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum0, 0:0:0);
    $width (negedge chksum0, 0:0:0);
  endspecify

endmodule

module chksum_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb \q_chksum_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module chksum_rdy ( output PADDI, input chksum_rdy );

  xo2iobufb0059 chksum_rdy_pad( .Z(PADDI), .PAD(chksum_rdy));

  specify
    (chksum_rdy => PADDI) = (0:0:0,0:0:0);
    $width (posedge chksum_rdy, 0:0:0);
    $width (negedge chksum_rdy, 0:0:0);
  endspecify

endmodule

module wc_15_ ( output PADDI, input wc15 );

  xo2iobufb0059 \wc_pad[15] ( .Z(PADDI), .PAD(wc15));

  specify
    (wc15 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc15, 0:0:0);
    $width (negedge wc15, 0:0:0);
  endspecify

endmodule

module wc_15__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[15] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsreb0060 ( input D0, SP, CK, LSR, output Q );

  IFS1P3DX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module wc_14_ ( output PADDI, input wc14 );

  xo2iobufb0059 \wc_pad[14] ( .Z(PADDI), .PAD(wc14));

  specify
    (wc14 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc14, 0:0:0);
    $width (negedge wc14, 0:0:0);
  endspecify

endmodule

module wc_14__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[14] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_13_ ( output PADDI, input wc13 );

  xo2iobufb0059 \wc_pad[13] ( .Z(PADDI), .PAD(wc13));

  specify
    (wc13 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc13, 0:0:0);
    $width (negedge wc13, 0:0:0);
  endspecify

endmodule

module wc_13__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[13] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_12_ ( output PADDI, input wc12 );

  xo2iobufb0059 \wc_pad[12] ( .Z(PADDI), .PAD(wc12));

  specify
    (wc12 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc12, 0:0:0);
    $width (negedge wc12, 0:0:0);
  endspecify

endmodule

module wc_12__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[12] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_11_ ( output PADDI, input wc11 );

  xo2iobufb0059 \wc_pad[11] ( .Z(PADDI), .PAD(wc11));

  specify
    (wc11 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc11, 0:0:0);
    $width (negedge wc11, 0:0:0);
  endspecify

endmodule

module wc_11__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[11] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_10_ ( output PADDI, input wc10 );

  xo2iobufb0059 \wc_pad[10] ( .Z(PADDI), .PAD(wc10));

  specify
    (wc10 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc10, 0:0:0);
    $width (negedge wc10, 0:0:0);
  endspecify

endmodule

module wc_10__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[10] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_9_ ( output PADDI, input wc9 );

  xo2iobufb0059 \wc_pad[9] ( .Z(PADDI), .PAD(wc9));

  specify
    (wc9 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc9, 0:0:0);
    $width (negedge wc9, 0:0:0);
  endspecify

endmodule

module wc_9__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[9] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_8_ ( output PADDI, input wc8 );

  xo2iobufb0059 \wc_pad[8] ( .Z(PADDI), .PAD(wc8));

  specify
    (wc8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc8, 0:0:0);
    $width (negedge wc8, 0:0:0);
  endspecify

endmodule

module wc_8__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[8] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_7_ ( output PADDI, input wc7 );

  xo2iobufb0059 \wc_pad[7] ( .Z(PADDI), .PAD(wc7));

  specify
    (wc7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc7, 0:0:0);
    $width (negedge wc7, 0:0:0);
  endspecify

endmodule

module wc_7__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[7] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_6_ ( output PADDI, input wc6 );

  xo2iobufb0059 \wc_pad[6] ( .Z(PADDI), .PAD(wc6));

  specify
    (wc6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc6, 0:0:0);
    $width (negedge wc6, 0:0:0);
  endspecify

endmodule

module wc_6__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[6] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_5_ ( output PADDI, input wc5 );

  xo2iobufb0059 \wc_pad[5] ( .Z(PADDI), .PAD(wc5));

  specify
    (wc5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc5, 0:0:0);
    $width (negedge wc5, 0:0:0);
  endspecify

endmodule

module wc_5__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_4_ ( output PADDI, input wc4 );

  xo2iobufb0059 \wc_pad[4] ( .Z(PADDI), .PAD(wc4));

  specify
    (wc4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc4, 0:0:0);
    $width (negedge wc4, 0:0:0);
  endspecify

endmodule

module wc_4__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_3_ ( output PADDI, input wc3 );

  xo2iobufb0059 \wc_pad[3] ( .Z(PADDI), .PAD(wc3));

  specify
    (wc3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc3, 0:0:0);
    $width (negedge wc3, 0:0:0);
  endspecify

endmodule

module wc_3__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_2_ ( output PADDI, input wc2 );

  xo2iobufb0059 \wc_pad[2] ( .Z(PADDI), .PAD(wc2));

  specify
    (wc2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc2, 0:0:0);
    $width (negedge wc2, 0:0:0);
  endspecify

endmodule

module wc_2__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_1_ ( output PADDI, input wc1 );

  xo2iobufb0059 \wc_pad[1] ( .Z(PADDI), .PAD(wc1));

  specify
    (wc1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc1, 0:0:0);
    $width (negedge wc1, 0:0:0);
  endspecify

endmodule

module wc_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module wc_0_ ( output PADDI, input wc0 );

  xo2iobufb0059 \wc_pad[0] ( .Z(PADDI), .PAD(wc0));

  specify
    (wc0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge wc0, 0:0:0);
    $width (negedge wc0, 0:0:0);
  endspecify

endmodule

module wc_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_wc_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_5_ ( output PADDI, input dt5 );

  xo2iobufb0059 \dt_pad[5] ( .Z(PADDI), .PAD(dt5));

  specify
    (dt5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt5, 0:0:0);
    $width (negedge dt5, 0:0:0);
  endspecify

endmodule

module dt_5__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_dt_0io[5] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_4_ ( output PADDI, input dt4 );

  xo2iobufb0059 \dt_pad[4] ( .Z(PADDI), .PAD(dt4));

  specify
    (dt4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt4, 0:0:0);
    $width (negedge dt4, 0:0:0);
  endspecify

endmodule

module dt_4__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_dt_0io[4] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_3_ ( output PADDI, input dt3 );

  xo2iobufb0059 \dt_pad[3] ( .Z(PADDI), .PAD(dt3));

  specify
    (dt3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt3, 0:0:0);
    $width (negedge dt3, 0:0:0);
  endspecify

endmodule

module dt_3__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_dt_0io[3] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_2_ ( output PADDI, input dt2 );

  xo2iobufb0059 \dt_pad[2] ( .Z(PADDI), .PAD(dt2));

  specify
    (dt2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt2, 0:0:0);
    $width (negedge dt2, 0:0:0);
  endspecify

endmodule

module dt_2__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_dt_0io[2] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_1_ ( output PADDI, input dt1 );

  xo2iobufb0059 \dt_pad[1] ( .Z(PADDI), .PAD(dt1));

  specify
    (dt1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt1, 0:0:0);
    $width (negedge dt1, 0:0:0);
  endspecify

endmodule

module dt_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_dt_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module dt_0_ ( output PADDI, input dt0 );

  xo2iobufb0059 \dt_pad[0] ( .Z(PADDI), .PAD(dt0));

  specify
    (dt0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge dt0, 0:0:0);
    $width (negedge dt0, 0:0:0);
  endspecify

endmodule

module dt_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_dt_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vc_1_ ( output PADDI, input vc1 );

  xo2iobufb0059 \vc_pad[1] ( .Z(PADDI), .PAD(vc1));

  specify
    (vc1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge vc1, 0:0:0);
    $width (negedge vc1, 0:0:0);
  endspecify

endmodule

module vc_1__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_vc_0io[1] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vc_0_ ( output PADDI, input vc0 );

  xo2iobufb0059 \vc_pad[0] ( .Z(PADDI), .PAD(vc0));

  specify
    (vc0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge vc0, 0:0:0);
    $width (negedge vc0, 0:0:0);
  endspecify

endmodule

module vc_0__MGIOL ( input DI, CE, CLK, output IN );
  wire   gndbI, DI_dly, CLK_dly, CE_dly;

  smuxlregsreb0060 \q_vc_0io[0] ( .D0(DI_dly), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module byte_datab_7_ ( output PADDI, input bytedata7 );

  xo2iobufb0059 \byte_datab_pad[7] ( .Z(PADDI), .PAD(bytedata7));

  specify
    (bytedata7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata7, 0:0:0);
    $width (negedge bytedata7, 0:0:0);
  endspecify

endmodule

module byte_datab_6_ ( output PADDI, input bytedata6 );

  xo2iobufb0059 \byte_datab_pad[6] ( .Z(PADDI), .PAD(bytedata6));

  specify
    (bytedata6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata6, 0:0:0);
    $width (negedge bytedata6, 0:0:0);
  endspecify

endmodule

module byte_datab_5_ ( output PADDI, input bytedata5 );

  xo2iobufb0059 \byte_datab_pad[5] ( .Z(PADDI), .PAD(bytedata5));

  specify
    (bytedata5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata5, 0:0:0);
    $width (negedge bytedata5, 0:0:0);
  endspecify

endmodule

module byte_datab_4_ ( output PADDI, input bytedata4 );

  xo2iobufb0059 \byte_datab_pad[4] ( .Z(PADDI), .PAD(bytedata4));

  specify
    (bytedata4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata4, 0:0:0);
    $width (negedge bytedata4, 0:0:0);
  endspecify

endmodule

module byte_datab_3_ ( output PADDI, input bytedata3 );

  xo2iobufb0059 \byte_datab_pad[3] ( .Z(PADDI), .PAD(bytedata3));

  specify
    (bytedata3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata3, 0:0:0);
    $width (negedge bytedata3, 0:0:0);
  endspecify

endmodule

module byte_datab_2_ ( output PADDI, input bytedata2 );

  xo2iobufb0059 \byte_datab_pad[2] ( .Z(PADDI), .PAD(bytedata2));

  specify
    (bytedata2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata2, 0:0:0);
    $width (negedge bytedata2, 0:0:0);
  endspecify

endmodule

module byte_datab_1_ ( output PADDI, input bytedata1 );

  xo2iobufb0059 \byte_datab_pad[1] ( .Z(PADDI), .PAD(bytedata1));

  specify
    (bytedata1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata1, 0:0:0);
    $width (negedge bytedata1, 0:0:0);
  endspecify

endmodule

module byte_datab_0_ ( output PADDI, input bytedata0 );

  xo2iobufb0059 \byte_datab_pad[0] ( .Z(PADDI), .PAD(bytedata0));

  specify
    (bytedata0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bytedata0, 0:0:0);
    $width (negedge bytedata0, 0:0:0);
  endspecify

endmodule

module byte_clkb ( output PADDI, input byte_clk );

  xo2iobufb0059 byte_clk_pad( .Z(PADDI), .PAD(byte_clk));

  specify
    (byte_clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge byte_clk, 0:0:0);
    $width (negedge byte_clk, 0:0:0);
  endspecify

endmodule

module long_en ( output PADDI, input long_en );

  xo2iobufb0059 long_en_pad( .Z(PADDI), .PAD(long_en));

  specify
    (long_en => PADDI) = (0:0:0,0:0:0);
    $width (posedge long_en, 0:0:0);
    $width (negedge long_en, 0:0:0);
  endspecify

endmodule

module long_en_MGIOL ( input DI, CLK, output IN );
  wire   vccbI, gndbI, DI_dly, CLK_dly;

  smuxlregsreb0060 q_long_en_0io( .D0(DI_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module short_en ( output PADDI, input short_en );

  xo2iobufb0059 short_en_pad( .Z(PADDI), .PAD(short_en));

  specify
    (short_en => PADDI) = (0:0:0,0:0:0);
    $width (posedge short_en, 0:0:0);
    $width (negedge short_en, 0:0:0);
  endspecify

endmodule

module short_en_MGIOL ( input DI, CLK, output IN );
  wire   vccbI, gndbI, DI_dly, CLK_dly;

  smuxlregsreb0060 q_short_en_0io( .D0(DI_dly), .SP(vccbI), .CK(CLK_dly), 
    .LSR(gndbI), .Q(IN));
  vccb DRIVEvccb( .PWR1(vccbI));
  gndb DRIVEgndb( .PWR0(gndbI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module GSR_INSTb ( input GSRNET );

  GSR5MODEb GSR_INSTb_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODEb ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
